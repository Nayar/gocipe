package main

import (
	"github.com/GeertJohan/go.rice/embedded"
	"time"
)

func init() {

	// define files
	file3 := &embedded.EmbeddedFile{
		Filename:    "application/gen-service.sh.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("#!/bin/bash\n\nCURRENT_DIR=`pwd`\nWEB_DIR=\"${CURRENT_DIR}/web\"\nLOG_FILE=\"${CURRENT_DIR}/gen-service.log\"\n\n# Function gets an array of services as arguments (e.g. \"wire\" in \"service_wire.proto\")\ngenerate_files() {\n    # For each sub-folder in \"web\"\n    for d in ${WEB_DIR}/*/; do\n        echo -e \"# ${d}\\n\"\n        if [ ! -f \"${d}package.json\" ]; then\n            echo \"- npm init: package.json file was not found\"\n            cd \"${d}\"\n            npm init --quiet --yes >> $LOG_FILE\n        fi\n\n        if [ ! -d \"${d}node_modules/\" ]; then\n            echo \"- npm init: node_modules dir was not found\"\n            cd \"${d}\"\n            npm init --quiet --yes >> $LOG_FILE\n        fi\n\n        if [ ! -d \"${d}node_modules/.bin\" ]; then\n            echo \"- npm init: .bin dir was not found\"\n            cd \"${d}\"\n            npm init --quiet --yes >> $LOG_FILE\n        fi\n\n        if [ ! -f \"${d}node_modules/.bin/protoc-gen-ts\" ]; then\n            echo \"- npm install --save-dev ts-protoc-gen: protoc-gen-ts executable was not found\"\n            cd \"${d}\"\n            npm install --quiet --save-dev ts-protoc-gen >> $LOG_FILE\n        fi\n\n        if [ ! -d \"${d}dist\" ]; then\n            echo \"- creating ${d}dist: dist dir was not found\"\n            mkdir -p \"${d}dist\"\n            echo \"\" > \"${d}dist/.gitkeep\"\n        fi\n\n        if [ ! -d \"${d}src/services\" ]; then\n            echo \"- creating ${d}src/services: src/services dir was not found\"\n            mkdir -p \"${d}src/services\"\n        fi\n\n        if [ -f \"${CURRENT_DIR}/proto/models.proto\" ]; then\n            echo \"- generating JS services for models\"\n            protoc -I=\"${CURRENT_DIR}/proto\" \\\n                --plugin=\"protoc-gen-ts=${d}node_modules/.bin/protoc-gen-ts\" \\\n                --js_out=\"import_style=commonjs,binary:${d}src/services\" \\\n                --ts_out=\"${d}src/services\" \"${CURRENT_DIR}/proto/models.proto\"\n        fi\n\n        # For each proto file (the argument)\n        for f in $@; do\n            if [ -f \"${CURRENT_DIR}/proto/service_${f}.proto\" ]; then\n                echo \"- generating JS services for ${f}\"\n                protoc -I=\"${CURRENT_DIR}/proto\" \\\n                    \"${CURRENT_DIR}/proto/service_${f}.proto\" \\\n                    --plugin=\"protoc-gen-ts=${d}node_modules/.bin/protoc-gen-ts\" \\\n                    --js_out=\"import_style=commonjs,binary:${d}src/services\" \\\n                    --ts_out=\"service=true:${d}src/services\"\n            fi\n        done\n\n        echo -e \":: done\\n\"\n    done\n\n    # proto/models.proto goes in \"models\" folder\n    protoc -I=\"${CURRENT_DIR}/proto\" \\\n        \"${CURRENT_DIR}/proto/models.proto\" \\\n        --go_out=plugins=grpc:${GOPATH}/src\n\n    # For each service proto file (the argument)\n    for f in $@; do\n        if [ -f \"${CURRENT_DIR}/proto/service_${f}.proto\" ]; then\n            echo \"# Generating GO services for ${f}\"\n            if [ ! -d \"${CURRENT_DIR}/services/${f}\" ]; then\n                mkdir -p \"${CURRENT_DIR}/services/${f}\"\n            fi\n            protoc -I=\"${CURRENT_DIR}/proto\" \\\n                \"${CURRENT_DIR}/proto/service_${f}.proto\" \\\n                --go_out=plugins=grpc:${GOPATH}/src\n        fi\n    done\n\n    echo -e \"\\n::Done and dusted :-)\\n\"\n}\n\n# -- MAIN SCRIPT STARTS HERE --\n\ncd ${CURRENT_DIR}\n\ndt=$(date '+%d/%m/%Y %H:%M:%S');\necho -e \"# Gen-service: ${dt}\\n\\n\" > \"${LOG_FILE}\"\n\nif [ ! -d \"${CURRENT_DIR}/vendor\" ]; then\n    echo -e \"# Dep init: Vendor folder not found.\\n\"\n    dep init >> $LOG_FILE\nfi\n\nHELP=false\nALL=false\ndeclare -a SERVICES=() # an array\n\nwhile true; do\n  case $1 in\n    -h | --help )\n        HELP=true;\n        shift;\n        ;;\n\n    -a | --all )\n        ALL=true;\n        shift;\n        ;;\n\n    -s | --services )\n        shift;\n        SERVICES=\"${@}\"\n        ;;\n\n    -- )\n        shift;\n        break\n        ;;\n\n    *  )\n        break\n        ;;\n  esac\ndone\n\n# Process all service_*.proto files in proto/ folder\nif [ \"${ALL}\" == true ]; then\n    index=0\n    for f in `find ${CURRENT_DIR}/proto/ -type f -iname \"service_*.proto\" | awk -F \"service_\" '{print $2}' | awk -F \".proto\" '{print $1}'`; do\n        SERVICES[$index]=\"${f}\"\n        index=$(($index+1))\n    done\n    generate_files ${SERVICES[@]}\n    exit 0\nfi\n\n# Process individual service_*.proto files in proto/ folder\nif [[ ${SERVICES[@]} ]]; then\n    generate_files ${SERVICES[@]}\n    exit 0\nfi\n\n# Display help\necho \"Generation of services. Usage:\"\necho \"\"\necho \" $ ./gen-service.sh -h|--help\"\necho \"   Displays this help\"\necho \"\"\necho \" $ ./gen-service.sh -a|--all\"\necho \"   Will process all service_*.proto files in 'proto' folder\"\necho \"\"\necho \" $ ./gen-service.sh -s|--services service1 service2 ... serviceN\"\necho \"   Will process individual service_*.proto files in 'proto' folder (as provided in the arguments)\"\necho \"\"\nexit 0;\n"),
	}
	file4 := &embedded.EmbeddedFile{
		Filename:    "application/main.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package main\n\nimport (\n\t\"net/http\"\n\n\trice \"github.com/GeertJohan/go.rice\"\n\t\"github.com/gorilla/mux\"\n\t\"github.com/improbable-eng/grpc-web/go/grpcweb\"\n\t\"google.golang.org/grpc\"\n)\n\n//go:generate rice embed-go\n\n{{if not .Bootstrap.NoVersion}}\n// Versioning info\nvar (\n\tappVersion = \"n/a\"\n\tappCommit  = \"n/a\"\n\tappBuilt   = \"n/a\"\n)\n{{end}}\n\nfunc main() {\n\t{{- if not .Bootstrap.NoVersion}}\n\tversion := flag.Bool(\"v\", false, \"prints current app version\")\n\tflag.Parse()\n\tif *version {\n\t\tfmt.Printf(\"Version : %v \\nCommit : %v\\nBuilt: %v\\n\", appVersion, appCommit, appBuilt)\n\t\tos.Exit(0)\n\t}\n\t{{end}}\n\n\tconfig := app.Bootstrap()\n\tmodels.Init(config.DB)\n\n\trouter := mux.NewRouter()\n\t\n\t{{if not .Bootstrap.NoGRPCWeb}}\n\tg := grpc.NewServer()\n\tws := grpcweb.WrapServer(g)\n\trouter.PathPrefix(\"/api\").Handler(http.StripPrefix(\"/api\", ws))\n\t{{end}}\n\n\t{{if .Bootstrap.Assets}}\n\tapp.Assets = rice.MustFindBox(\"assets\")\n\n\tif app.Env == app.EnvironmentDev {\n\t\tfiles, err := ioutil.ReadDir(\"web\")\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t\tfor _, f := range files {\n\t\t\tif f.IsDir() {\n\t\t\t\thttpDir := \"web/\" + f.Name() + \"/dist\"\n\t\t\t\trouter.PathPrefix(\"/\" + f.Name()).Handler(http.StripPrefix(\"/\"+f.Name(), http.FileServer(http.Dir(httpDir))))\n\t\t\t}\n\t\t}\n\t} else {\n\t\tw, err := app.Assets.Open(\"web\")\n\t\tif err != nil {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t\tdirs, err := w.Readdir(0)\n\t\tif err != nil {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t\tfor _, dir := range dirs {\n\t\t\tif dir.IsDir() {\n\t\t\t\trouter.PathPrefix(\n\t\t\t\t\t\"/\" + dir.Name(),\n\t\t\t\t).Handler(\n\t\t\t\t\tutil.NewWebBoxHandler(app.Assets, \"web/\"+dir.Name(), dir.Name()),\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\t{{end}}\n\n\t{{if not .Bootstrap.NoGRPCWire}}\n\tgo func() {\n\t\tl, err := net.Listen(\"tcp\", \":\"+config.GRPCPort)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"error starting tcp listener: %v\", err)\n\t\t}\n\t\tdefer l.Close()\n\n\t\tg := grpc.NewServer()\n\t\tif err := g.Serve(l); err != nil {\n\t\t\tlog.Fatalf(\"error serving grpc: %v\", err)\n\t\t}\n\t}()\n\t{{end}}\n\n\tif err := http.ListenAndServe(\":\"+config.HTTPPort, router); err != nil {\n\t\tlog.Fatalf(\"error starting http server: %v\", err)\n\t}\n}\n"),
	}
	file5 := &embedded.EmbeddedFile{
		Filename:    "application/makefile.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("VERSION     := 1.0.0\nCOMMIT      := `git rev-parse HEAD`\nDATE        := `date +%FT%T%z`\nBUILD_FLAGS := \"-X=main.appVersion=$(VERSION) -X=main.appCommit=$(COMMIT) -X=main.appBuilt=$(DATE)\"\n\n.PHONY: build\n\nbuild:\n\t@echo \"Compiling for DEV...\"\n\t@go clean && go build -ldflags ${BUILD_FLAGS} -o build/id\n\t@echo \"Done!\"\n\nprod:\n\t@echo \"Compiling for PROD ...\"\n\t@go clean && go generate && env GOOS=linux GOARCH=amd64 go build -ldflags ${BUILD_FLAGS} -o build/id\n\t@echo \"Compressing into tar.gz ...\"\n\t@tar -czf build/id-`date +%FT%T`.tar.gz build/id\n\t@rm build/id\n\t@echo \"Done!\""),
	}
	file6 := &embedded.EmbeddedFile{
		Filename:    "bootstrap.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package app\n\nimport (\n\t\"bytes\"\n\t\"database/sql\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/joho/godotenv\"\n\trice \"github.com/GeertJohan/go.rice\"\n\t// Load database driver\n\t_ \"github.com/lib/pq\"\n)\n\nconst (\n\t//EnvironmentProd represents production environment\n\tEnvironmentProd = \"PROD\"\n\n\t//EnvironmentDev represents development environment\n\tEnvironmentDev  = \"DEV\"\n)\n\nvar (\n\t// bootstrapped is a flag to prevent multiple bootstrapping\n\tbootstrapped = false\n\n\t// Env indicates in which environment (prod / dev) the application is running\n\tEnv string\n\t{{range .Bootstrap.Settings}}{{if .Public}}\n\t// {{.Name}} {{.Description}}\n\t{{.Name}} string\n\t{{end}}{{end}}\n\t{{if .Bootstrap.Assets}}\n\t// Assets is a rice box to assets directory\n\tAssets *rice.Box\n\t{{end}}\n)\n\n// Config represents application configuration loaded during bootstrap\ntype Config struct {\n\t{{if not .Bootstrap.NoDB}}DB  *sql.DB{{end}}\n\tHTTPPort string\n\t{{if not .Bootstrap.NoGRPCWire}}GRPCPort string{{end}}\n\t{{range .Bootstrap.Settings}}{{if not .Public}}\n\t// {{.Name}} {{.Description}}\n\t{{.Name}} string\n\t{{end}}{{end}}\n}\n\n// Bootstrap loads environment variables and initializes the application\nfunc Bootstrap() *Config {\n\tvar config Config\n\n\tif bootstrapped {\n\t\treturn nil\n\t}\n\n\tgodotenv.Load()\n\n\tEnv = os.Getenv(\"ENV\")\n\tif Env == \"\" {\n\t\tEnv = EnvironmentProd\n\t}\n\n\t{{if not .Bootstrap.NoDB}}\n\tdsn := os.Getenv(\"DSN\")\n\tif dsn == \"\" {\n\t\tlog.Fatal(\"Environment variable DSN must be defined. Example: postgres://user:pass@host/db?sslmode=disable\")\n\t}\n\n\tvar err error\n\tconfig.DB, err = sql.Open(\"postgres\", dsn)\n\tif err == nil {\n\t\tlog.Println(\"Connected to database successfully.\")\n\t} else if (Env == EnvironmentDev) {\n\t\tlog.Println(\"Database connection failed: \", err)\n\t} else {\n\t\tlog.Fatal(\"Database connection failed: \", err)\n\t}\n\n\terr = config.DB.Ping()\n\tif err == nil {\n\t\tlog.Println(\"Pinged database successfully.\")\n\t} else if (Env == EnvironmentDev) {\n\t\tlog.Println(\"Database ping failed: \", err)\n\t} else {\n\t\tlog.Fatal(\"Database ping failed: \", err)\n\t}\n\t{{end}}\n\n\tconfig.HTTPPort = os.Getenv(\"HTTP_PORT\")\n\tif config.HTTPPort == \"\" {\n\t\tconfig.HTTPPort = \"{{.Bootstrap.HTTPPort}}\"\n\t}\n\n\t{{if not .Bootstrap.NoGRPCWire}}\n\tconfig.GRPCPort = os.Getenv(\"GRPC_PORT\")\n\tif config.GRPCPort == \"\" {\n\t\tconfig.GRPCPort = \"{{.Bootstrap.GRPCPort}}\"\n\t}\n\t{{end}}\n\n\t{{range .Bootstrap.Settings}}{{if not .Public}}\n\tconfig.{{.Name}} = os.Getenv(\"{{upper (snake .Name)}}\")\n\tif config.{{.Name}} == \"\" {\n\t\tlog.Fatal(\"Environment variable {{upper (snake .Name)}} ({{.Description}}) must be defined.\")\n\t}\n\t{{end}}{{end}}\n\n\t{{range .Bootstrap.Settings}}{{if .Public}}\n\t{{.Name}} = os.Getenv(\"{{upper (snake .Name)}}\")\n\tif {{.Name}} == \"\" {\n\t\tlog.Fatal(\"Environment variable {{upper (snake .Name)}} ({{.Description}}) must be defined.\")\n\t}\n\t{{end}}{{end}}\n\n\tos.Clearenv() //prevent non-authorized access\n\n\treturn &config\n}\n\n\n{{if .Bootstrap.Assets}}\n// ExecuteTemplate applies templating a text/template template given data and returns the string output\nfunc ExecuteTemplate(name string, data interface{}) (string, error) {\n\tvar output bytes.Buffer\n\n\traw, err := Assets.String(\"templates/\"+name)\n\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\ttpl, err := template.New(name).Funcs(template.FuncMap{}).Parse(raw)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\terr = tpl.Execute(&output, data)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn output.String(), nil\n}\n{{end}}"),
	}
	file7 := &embedded.EmbeddedFile{
		Filename:    "bootstrap_env.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("# The following must be defined as well: ENV{{if not .Bootstrap.NoDB}}, DSN{{end}}, HTTP_PORT\n{{range .Bootstrap.Settings}}{{upper (snake .Name)}} = \"{{.Description}}\"\n{{end}}"),
	}
	file9 := &embedded.EmbeddedFile{
		Filename:    "bread/service_bread.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package bread\n\nimport (\n\t\"github.com/pkg/errors\"\n\t\"golang.org/x/net/context\"\n)\n\n// Service represents implementation of BREAD service to Browse, Read, Edit, Add and Delete entities\ntype Service struct {\n\tdb *sql.DB\n}\n\n{{range .Entities}}\n// Create{{.Name}} allows creation of entity of type {{.Name}}\nfunc(s Service) Create{{.Name}}(ctx context.Context, req *Create{{.Name}}Request) (*Create{{.Name}}Response, error) {\n\tvar (\n\t\terr  error\n\t\ttx   *sql.Tx\n\t\tres  Create{{.Name}}Response\n\t\t{{if or .Bread.Hooks.PreCreate .Bread.Hooks.PostCreate -}}\n\t\tstop bool\n\t\t{{- end}}\n\t)\n\n\tres.{{.Name}} = req.{{.Name}}\n\ttx, err = s.db.Begin()\n\t{{if .Bread.Hooks.PreCreate}}\n\tstop, err = {{lower .Name}}PreCreate(ctx, tx, req, &res, err)\n\tif stop {\n\t\treturn &res, nil\n\t}\n\t{{- end}}\n\n\tif err != nil {\n\t\treturn nil, errors.WithStack(err)\n\t}\n\n\terr = models.{{.Name}}Repo.SaveWithRel(ctx, res.{{.Name}}, tx, true)\n\n\t{{if .Bread.Hooks.PostCreate -}}\n\tstop, err = {{lower .Name}}PostCreate(ctx, req, &res, err)\n\tif stop {\n\t\treturn &res, nil\n\t}\n\t{{- end}}\n\n\tif err != nil {\n\t\treturn nil, errors.WithStack(err)\n\t}\n\n\treturn &res, errors.WithStack(err)\n}\n\n// Get{{.Name}} allows getting a single entity of type {{.Name}}\nfunc(s Service) Get{{.Name}}(ctx context.Context, req *Get{{.Name}}Request) (*Get{{.Name}}Response, error) {\n\tvar (\n\t\tres  Get{{.Name}}Response\n\t\terr  error\n\t\t{{if or .Bread.Hooks.PreRead .Bread.Hooks.PostRead -}}\n\t\tstop bool\n\t\t{{- end}}\n\t)\n\n\t{{if .Bread.Hooks.PreRead}}\n\tstop, err = {{lower .Name}}PreRead(ctx, req, &res)\n\tif stop {\n\t\treturn &res, nil\n\t}\n\t{{- end}}\n\n\tres.{{.Name}}, err = models.{{.Name}}Repo.GetWithRel(ctx, req.ID)\n\n\t{{if .Bread.Hooks.PostRead -}}\n\tstop, err = {{lower .Name}}PostRead(ctx, req, &res, err)\n\tif stop {\n\t\treturn &res, nil\n\t}\n\t{{- end}}\n\n\tif err != nil {\n\t\treturn nil, errors.WithStack(err)\n\t}\n\n\treturn &res, nil\n}\n\n// List{{plural .Name}} allows listing all entity of type {{.Name}}\nfunc(s Service) List{{plural .Name}}(ctx context.Context, req *List{{plural .Name}}Request) (*List{{plural .Name}}Response, error) {\n\tvar (\n\t\tres  List{{plural .Name}}Response\n\t\terr  error\n\t\t{{if or .Bread.Hooks.PreList .Bread.Hooks.PostList -}}\n\t\tstop bool\n\t\t{{- end}}\n\t)\n\n\t{{if .Bread.Hooks.PreList -}}\n\tstop, err = {{lower .Name}}PreList(ctx, req, &res)\n\tif stop {\n\t\treturn &res, nil\n\t}\n\t{{- end}}\n\n\tres.{{plural .Name}}, err = models.{{.Name}}Repo.ListWithRel(ctx, models.NoOffset, models.NoLimit, req.Filters...)\n\n\t{{if .Bread.Hooks.PostList -}}\n\tstop, err = {{lower .Name}}PostList(ctx, req, &res, err)\n\tif stop {\n\t\treturn &res, nil\n\t}\n\t{{- end}}\n\t\n\tif err != nil {\n\t\treturn nil, errors.WithStack(err)\n\t}\n\n\treturn &res, nil\n}\n\n// Update{{.Name}} allows updating one entity of type {{.Name}}\nfunc(s Service) Update{{.Name}}(ctx context.Context, req *Update{{.Name}}Request) (*Update{{.Name}}Response, error) {\n\tvar (\n\t\terr  error\n\t\ttx   *sql.Tx\n\t\tres  Update{{.Name}}Response\n\t\t{{if or .Bread.Hooks.PreUpdate .Bread.Hooks.PostUpdate -}}\n\t\tstop bool\n\t\t{{- end}}\n\t)\n\n\t// existing records in DB\n\texisting, err := models.{{.Name}}Repo.Get(ctx, req.{{.Name}}.ID)\n\tif err != nil {\n\t\t{{if .Bread.Hooks.PreUpdate -}}\n\t\tstop, err = {{lower .Name}}PreUpdate(ctx, tx, req, &res, *existing, err)\n\t\tif stop {\n\t\t\treturn &res, nil\n\t\t}\n\t\t{{end}}\n\t\treturn nil, errors.WithStack(err)\n\t}\n\n\tres.{{.Name}} = req.{{.Name}}\n\ttx, err = s.db.Begin()\n\n\t{{if .Bread.Hooks.PreUpdate -}}\n\tstop, err = {{lower .Name}}PreUpdate(ctx, tx, req, &res, *existing, err)\n\tif stop {\n\t\treturn &res, nil\n\t}\n\t{{- end}}\n\n\tif err != nil {\n\t\treturn nil, errors.WithStack(err)\n\t}\n\n\terr = models.{{.Name}}Repo.SaveWithRel(ctx, res.{{.Name}}, tx, true)\n\tif err != nil {\n\t\treturn nil, errors.WithStack(err)\n\t}\n\n\t{{if .Bread.Hooks.PostUpdate -}}\n\tstop, err = {{lower .Name}}PostUpdate(ctx, req, &res, *existing, err)\n\tif stop {\n\t\treturn &res, nil\n\t}\n\t{{- end}}\n\n\tif err != nil {\n\t\treturn nil, errors.WithStack(err)\n\t}\n\n\treturn &res, nil\n}\n\n// Delete{{.Name}} allows deleting an entity of type {{.Name}}\nfunc(s Service) Delete{{.Name}}(ctx context.Context, req *Delete{{.Name}}Request) (*Delete{{.Name}}Response, error) {\n\tvar (\n\t\terr  error\n\t\ttx   *sql.Tx\n\t\tres  Delete{{.Name}}Response\n\t\t{{if or .Bread.Hooks.PreDelete .Bread.Hooks.PostDelete -}}\n\t\tstop bool\n\t\t{{- end}}\n\t)\n\n\t// existing records in DB\n\texisting, err := models.{{.Name}}Repo.Get(ctx, req.ID)\n\tif err != nil {\n\t\t{{if .Bread.Hooks.PreDelete -}}\n\t\tstop, err = {{lower .Name}}PreDelete(ctx, tx, req, &res, *existing, err)\n\t\tif stop {\n\t\t\treturn &res, nil\n\t\t}\n\t\t{{end}}\n\t\treturn nil, errors.WithStack(err)\n\t}\n\n\ttx, err = s.db.Begin()\n\t{{if .Bread.Hooks.PreDelete}}\n\tstop, err = {{lower .Name}}PreDelete(ctx, tx, req, &res, *existing, err)\n\tif stop {\n\t\treturn &res, nil\n\t}\n\t{{end}}\n\terr = models.{{.Name}}Repo.Delete(ctx, existing, tx, true)\n\tif err != nil {\n\t\treturn nil, errors.WithStack(err)\n\t}\n\t{{if .Bread.Hooks.PostDelete}}\n\tstop, err = {{lower .Name}}PostDelete(ctx, req, &res, *existing, err)\n\tif stop {\n\t\treturn &res, nil\n\t}\n\t{{- end}}\n\t\n\tif err != nil {\n\t\treturn nil, errors.WithStack(err)\n\t}\n\n\treturn &res, nil\n}\n{{end}}\n"),
	}
	filea := &embedded.EmbeddedFile{
		Filename:    "bread/service_bread.proto.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("syntax = \"proto3\";\n\npackage bread;\n\nimport \"models.proto\";\noption go_package = \"{{.ProjectImportPath}}/services/bread\";\n\nmessage ListFilters {\n    string Field = 1;\n    string Operation = 2;\n    string Value = 3;\n}\n\nmessage File {\n    string Field = 1;\n    string Filename = 2;\n    bytes Content = 3;\n}\n\nservice Bread {\n    {{range .Entities}}\n    // Create{{.Name}} allows creation of entity of type {{.Name}}\n    rpc Create{{.Name}}(Create{{.Name}}Request) returns (Create{{.Name}}Response);\n    \n    // Get{{.Name}} allows getting a single entity of type {{.Name}}\n    rpc Get{{.Name}}(Get{{.Name}}Request) returns (Get{{.Name}}Response);\n    \n    // List{{.Name}} allows listing all entity of type {{.Name}}\n    rpc List{{plural .Name}}(List{{plural .Name}}Request) returns (List{{plural .Name}}Response);\n    \n    // Update{{.Name}} allows updating one entity of type {{.Name}}\n    rpc Update{{.Name}}(Update{{.Name}}Request) returns (Update{{.Name}}Response);\n    \n    // Delete{{.Name}} allows deleting an entity of type {{.Name}}\n    rpc Delete{{.Name}}(Delete{{.Name}}Request) returns (Delete{{.Name}}Response);\n    {{end}}\n}\n\n{{range .Entities}}\n// Create{{.Name}}Request represents a request to allow creation of entity of type {{.Name}}\nmessage Create{{.Name}}Request {\n    string Key = 1;\n    models.{{.Name}} {{.Name}} = 2;\n    repeated File Files = 3;\n}\n// Create{{.Name}}Response represents result to a Create{{.Name}}Request\nmessage Create{{.Name}}Response {\n    models.{{.Name}} {{.Name}} = 1;\n}\n\n// Get{{.Name}}Request represents a request to allow getting a single entity of type {{.Name}}\nmessage Get{{.Name}}Request {\n    string Key = 1;\n    string ID = 2;\n}\n// Get{{.Name}}Response represents result to a Get{{.Name}}Request\nmessage Get{{.Name}}Response {\n    models.{{.Name}} {{.Name}} = 1;\n}\n\n// List{{plural .Name}}Request represents a request to allow listing all entity of type {{.Name}}\nmessage List{{plural .Name}}Request {\n    string Key = 1;\n    int64 Limit = 2;\n    int64 Offset = 3;\n    repeated ListFilters Filters = 4;\n}\n// List{{plural .Name}}Response represents result to a List{{plural .Name}}Request\nmessage List{{plural .Name}}Response {\n    repeated models.{{.Name}} {{plural .Name}} = 1;\n}\n\n// Update{{.Name}}Request represents a request to allow updating one entity of type {{.Name}}\nmessage Update{{.Name}}Request {\n    string Key = 1;\n    models.{{.Name}} {{.Name}} = 2;\n    repeated File Files = 3;\n}\n// Update{{.Name}}Response represents result to a Update{{.Name}}Request\nmessage Update{{.Name}}Response {\n    models.{{.Name}} {{.Name}} = 1;\n}\n\n// Delete{{.Name}}Request represents a request to allow deleting an entity of type {{.Name}}\nmessage Delete{{.Name}}Request {\n    string Key = 1;\n    string ID = 2;\n}\n// Delete{{.Name}}Response represents result to a Delete{{.Name}}Request\nmessage Delete{{.Name}}Response {}\n{{end}}"),
	}
	fileb := &embedded.EmbeddedFile{
		Filename:    "bread/service_bread_hooks.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package bread\n\n{{if .PreRead}}\n// {{lower .Entity.Name}}PreRead is a hook that occurs before the ead operation in BREAD service. Returns stop (boolean) and error\nfunc {{lower .Entity.Name}}PreRead(ctx context.Context, req *Get{{.Entity.Name}}Request, res *Get{{.Entity.Name}}Response) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n{{if .PostRead}}\n// {{lower .Entity.Name}}PostRead is a hook that occurs after the Read operation in BREAD service. Returns stop (boolean) and error\nfunc {{lower .Entity.Name}}PostRead(ctx context.Context, req *Get{{.Entity.Name}}Request, res *Get{{.Entity.Name}}Response, err error) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n{{if .PreList}}\n// {{lower .Entity.Name}}PreList is a hook that occurs before the ist operation in BREAD service. Returns stop (boolean) and error\nfunc {{lower .Entity.Name}}PreList(ctx context.Context, req *List{{plural  .Entity.Name}}Request, res *List{{plural .Entity.Name}}Response) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n{{if .PostList}}\n// {{lower .Entity.Name}}PostList is a hook that occurs after the List operation in BREAD service. Returns stop (boolean) and error\nfunc {{lower .Entity.Name}}PostList(ctx context.Context, req *List{{plural  .Entity.Name}}Request, res *List{{plural  .Entity.Name}}Response, err error) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n{{if .PreCreate}}\n// {{lower .Entity.Name}}PreCreate is a hook that occurs before the reate operation in BREAD service. Returns stop (boolean) and error\nfunc {{lower .Entity.Name}}PreCreate(ctx context.Context, tx *sql.Tx, req *Create{{.Entity.Name}}Request, res *Create{{.Entity.Name}}Response, err error) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n{{if .PostCreate}}\n// {{lower .Entity.Name}}PostCreate is a hook that occurs after the Create operation in BREAD service. Returns stop (boolean) and error\nfunc {{lower .Entity.Name}}PostCreate(ctx context.Context, req *Create{{.Entity.Name}}Request, res *Create{{.Entity.Name}}Response, err error) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n{{if .PreUpdate}}\n// {{lower .Entity.Name}}PreUpdate is a hook that occurs before the pdate operation in BREAD service. Returns stop (boolean) and error\nfunc {{lower .Entity.Name}}PreUpdate(ctx context.Context, tx *sql.Tx, req *Update{{.Entity.Name}}Request, res *Update{{.Entity.Name}}Response, existing models.{{.Entity.Name}}, err error) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n{{if .PostUpdate}}\n// {{lower .Entity.Name}}PostUpdate is a hook that occurs after the Update operation in BREAD service. Returns stop (boolean) and error\nfunc {{lower .Entity.Name}}PostUpdate(ctx context.Context, req *Update{{.Entity.Name}}Request, res *Update{{.Entity.Name}}Response, existing models.{{.Entity.Name}}, err error) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n{{if .PreDelete}}\n// {{lower .Entity.Name}}PreDelete is a hook that occurs before the elete operation in BREAD service. Returns stop (boolean) and error\nfunc {{lower .Entity.Name}}PreDelete(ctx context.Context, tx *sql.Tx, req *Delete{{.Entity.Name}}Request, res *Delete{{.Entity.Name}}Response, existing models.{{.Entity.Name}}, err error) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n{{if .PostDelete}}\n// {{lower .Entity.Name}}PostDelete is a hook that occurs after the Delete operation in BREAD service. Returns stop (boolean) and error\nfunc {{lower .Entity.Name}}PostDelete(ctx context.Context, req *Delete{{.Entity.Name}}Request, res *Delete{{.Entity.Name}}Response, existing models.{{.Entity.Name}}, err error) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n"),
	}
	filed := &embedded.EmbeddedFile{
		Filename:    "crud/crud.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package models\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"github.com/pkg/errors\"\n\t{{range .Imports}}{{.}}{{end}}\n)\n{{.Structure}}\n{{.Get}}\n{{.List}}\n{{.DeleteSingle}}\n{{.DeleteMany}}\n{{.Save}}\n{{.Insert}}\n{{.Update}}\n{{.Merge}}\n{{range .LoadRelated}}{{.}}{{end}}\n{{range .SaveRelated}}{{.}}{{end}}"),
	}
	filee := &embedded.EmbeddedFile{
		Filename:    "crud/hooks.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package models\nimport (\n\t\"database/sql\"\n)\n\n{{if .Hooks.PreRead}}\nfunc crudPreGet(id {{pkeyPropertyType .Entity.PrimaryKey}}) error {\n\treturn nil\n}\n{{end}}\n{{if .Hooks.PostRead}}\nfunc crudPostGet(entity *{{.Entity.Name}}) error {\n\treturn nil\n}\n{{end}}\n\n{{if .Hooks.PreList}}\nfunc crudPreList(filters []models.ListFilter) ([]models.ListFilter, error) {\n\treturn filters, nil\n}\n{{end}}\n{{if .Hooks.PostList}}\nfunc crudPostList(list []*{{.Entity.Name}}) ([]*{{.Entity.Name}}, error) {\n\treturn list, nil\n}\n{{end}}\n\n{{if .Hooks.PreDelete}}\nfunc crudPreDelete(id {{pkeyPropertyType .Entity.PrimaryKey}}, tx *sql.Tx) error {\n\treturn nil\n}\n{{end}}\n{{if .Hooks.PostDelete}}\nfunc crudPostDelete(id {{pkeyPropertyType .Entity.PrimaryKey}}, tx *sql.Tx) error {\n\treturn nil\n}\n{{end}}\n\n\n{{if .Hooks.PreSave }}\nfunc crudPreSave(op string, entity *{{.Entity.Name}}, tx *sql.Tx) error {\n\treturn nil\n}\n{{end}}\n{{if .Hooks.PreSave }}\nfunc crudPostSave(op string, entity *{{.Entity.Name}}, tx *sql.Tx) error {\n\treturn nil\n}\n{{end}}\n\n"),
	}
	filef := &embedded.EmbeddedFile{
		Filename:    "crud/models.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package models\n\nvar (\n\tdb *sql.DB\n\t{{range .Entities}}\n\t// {{.Name}}Repo provides interaction with database content repository for {{.Name}}\n\t{{.Name}}Repo {{.Name}}Repository\n\t{{- end}}\n)\n\nconst (\n\t// OperationMerge indicates a Merge save operation is under way\n\tOperationMerge  byte = 'M'\n\t// OperationInsert indicates a Insert save operation is under way\n\tOperationInsert byte = 'I'\n\t// OperationUpdate indicates a Update save operation is under way\n\tOperationUpdate byte = 'U'\n\n\t// NoOffset indicates List/Select queries without offset clause\n\tNoOffset = -1\n\t// NoLimit indicates List/Select queries without limit clause\n\tNoLimit  = -1\n)\n\n// Init is responsible to initialize all repositories\nfunc Init(database *sql.DB) {\n\tdb = database\n\t{{range .Entities}}\n\t{{.Name}}Repo = {{.Name}}Repositorium{db: database}\n\t{{- end}}\n}\n\n// StartTransaction initiates a database transaction\nfunc StartTransaction() (*sql.Tx, error) {\n\treturn db.Begin()\n}\n\n// ListFilterItem represents a filter to apply during listing (crud)\ntype ListFilterItem struct {\n\tField     string\n\tOperation string\n\tValue     interface{}\n}\n\n// ListFilter interface\ntype ListFilter interface {\n\tGetField() string\n\tGetOperation() string\n\tGetValue() string\n}\n\n// GetField gets \"Field\" value from ListFilterItem struct\nfunc (s ListFilterItem) GetField() string {\n\treturn s.Field\n}\n\n// GetOperation gets \"Operation\" value from ListFilterItem struct\nfunc (s ListFilterItem) GetOperation() string {\n\treturn s.Operation\n}\n\n// GetValue gets \"Value\" value from ListFilterItem struct\nfunc (s ListFilterItem) GetValue() string {\n\tt, ok := s.Value.(string)\n\tif ok {\n\t\treturn t\n\t}\n\n\treturn \"\"\n}\n\n{{- $Entities := .Entities -}}\n{{range .Entities }}\n// {{.Name}}Repository encapsulates operations that may be performed on the entity {{.Name}}\ntype {{.Name}}Repository interface {\n{{if (DerefCrudOpts .Crud).Create -}}\n\t// Insert performs an SQL insert for {{.Name}} record and update instance with inserted id.\n\tInsert(ctx context.Context, entity *{{.Name}}, tx *sql.Tx, autocommit bool) error\n\n\t// InsertWithRel performs an SQL insert for {{.Name}} record and update instance with inserted id; including related entities. Prefer using Save instead of Insert directly.\n\tInsertWithRel(ctx context.Context, entity *{{.Name}}, tx *sql.Tx, autocommit bool) error\n{{end -}}\n{{if (DerefCrudOpts .Crud).Read -}}\n\t// Get returns a single {{.Name}} from database by primary key\n\tGet(ctx context.Context, id {{pkeyPropertyType .PrimaryKey}}) (*{{.Name}}, error)\n\n\t// GetWithRel returns a single {{.Name}} from database by primary key; loads related entities\n\tGetWithRel(ctx context.Context, id {{pkeyPropertyType .PrimaryKey}}) (*{{.Name}}, error)\n{{end -}}\n{{if (DerefCrudOpts .Crud).ReadList -}}\n\t// List returns a slice containing {{.Name}} records\n\tList(ctx context.Context, offset int, limit int, filters ...ListFilter) ([]*{{.Name}}, error)\n\n\t// ListWithRel returns a slice containing {{.Name}} records; will also load related entities.\n\tListWithRel(ctx context.Context, offset int, limit int, filters ...ListFilter) ([]*{{.Name}}, error)\n\n\t// Select returns a slice containing {{.Name}} records according to a custom SQL condition\n\tSelect(ctx context.Context, offset int, limit int, condition string, values ...interface{}) ([]*{{.Name}}, error)\n\t\n\t// SelectWithRel returns a slice containing {{.Name}} records according to a custom SQL condition; will also load related entities.\n\tSelectWithRel(ctx context.Context, offset int, limit int, condition string, values ...interface{}) ([]*{{.Name}}, error)\n{{end -}}\n\n{{if (DerefCrudOpts .Crud).Update -}}\n\t// Update Will execute an SQLUpdate Statement for {{.Name}} in the database. Prefer using Save instead of Update directly.\n\tUpdate(ctx context.Context, entity *{{.Name}}, tx *sql.Tx, autocommit bool) error\n\n\t// UpdateWithRel Will execute an SQLUpdate Statement for {{.Name}} in the database; including related entities. Prefer using Save instead of Update directly.\n\tUpdateWithRel(ctx context.Context, entity *{{.Name}}, tx *sql.Tx, autocommit bool) error\n{{end -}}\n\n{{if (DerefCrudOpts .Crud).Delete -}}\n\t// DeleteMany deletes many {{.Name}} records from database using filter\n\tDeleteMany(ctx context.Context, filters []ListFilter, tx *sql.Tx, autocommit bool) error\n\n\t// Delete deletes a {{.Name}} record from database and sets id to nil\n\tDelete(ctx context.Context, entity *{{.Name}}, tx *sql.Tx, autocommit bool) error\n{{end -}}\n{{if (DerefCrudOpts .Crud).Merge -}}\n\t// Merge performs an SQL merge for {{.Name}} record.\n\tMerge(ctx context.Context, entity *{{.Name}}, tx *sql.Tx, autocommit bool) error\n{{end -}}\n{{if (and (and (DerefCrudOpts .Crud).Create (DerefCrudOpts .Crud).Update) (DerefCrudOpts .Crud).Merge) -}}\n\t// Save either inserts or updates a {{.Name}} record based on whether or not id is nil\n\tSave(ctx context.Context, entity *{{.Name}}, tx *sql.Tx, autocommit bool) error\n\n\t// SaveWithRel either inserts or updates a {{.Name}} record based on whether or not id is nil; will also save related entities\n\tSaveWithRel(ctx context.Context, entity *{{.Name}}, tx *sql.Tx, autocommit bool) error\n{{end -}}\n{{- $ThisEntity := . -}}\n{{range .Relationships -}}\n{{if eq .Type \"many-many\" -}}\n\t// Load{{RelFuncName .}} is a helper function to load related {{.Name}} entities\n\tLoad{{RelFuncName .}}(ctx context.Context, entities ...*{{$ThisEntity.Name}}) error\n\n\t// Save{{RelFuncName .}} is a helper function to save related {{.Name}} in a pivot table (many-many relationship)\n\tSave{{RelFuncName .}}(ctx context.Context, tx *sql.Tx, autocommit bool, idthis {{pkeyPropertyType $ThisEntity.PrimaryKey}}, relatives ...*{{fkeyPropertyTypeName $Entities .}}) error\n\n\t// Save{{RelFuncName .}}IDs is a helper function to save related {{.Name}} IDs in a pivot table (many-many relationship)\n\tSave{{RelFuncName .}}IDs(ctx context.Context, tx *sql.Tx, autocommit bool, idthis {{pkeyPropertyType $ThisEntity.PrimaryKey}}, relatives ...{{fkeyPropertyType $Entities .}}) error\n{{end -}}\n{{if eq .Type \"one-many\" -}}\n\t// Load{{RelFuncName .}} is a helper function to load related {{.Name}} entities\n\tLoad{{RelFuncName .}}(ctx context.Context, entities ...*{{$ThisEntity.Name}}) error\n{{end -}}\n{{if eq .Type \"many-one\" -}}\n\t// Load{{RelFuncName .}} is a helper function to load related {{.Name}} entities\n\tLoad{{RelFuncName .}}(ctx context.Context, entities ...*{{$ThisEntity.Name}}) error\n{{end -}}\n{{end -}}\n}\n\n// {{.Name}}Repositorium implements {{.Name}}Repository\ntype {{.Name}}Repositorium struct {\n\tdb *sql.DB\n}\n{{end}}\n\n// QueryAddIN adds IN condition to query\nfunc QueryAddIN(segments []string, values []interface{}, index *int, fieldname string, val interface{}, not bool) error {\n\tvar subsegments []string\n\n\tif data, ok := val.([]bool); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]byte); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]complex64); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]complex128); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]float32); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]float64); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]int); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]int8); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]int16); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]int32); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]int64); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]rune); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]string); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]uint); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]uint8); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]uint16); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]uint32); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]uint64); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\n\t} else if data, ok := val.([]uintptr); ok {\n\t\tfor d := range data {\n\t\t\tsubsegments = append(subsegments, \"$\"+strconv.Itoa(*index+1))\n\t\t\tvalues = append(values, data[d])\n\t\t}\t} else {\n\t\treturn moderrors.InFilterValueUnknownError\n\t}\n\n\tif len(subsegments) == 0 {\n\t\treturn moderrors.InFilterValueEmptyError\n\t}\n\n\tcondition := \"IN\"\n\tif not {\n\t\tcondition = \"NOT \"+condition\n\t}\n\n\t*index = *index + len(subsegments)\n\tsegments = append(segments, fieldname+condition+\" (\"+strings.Join(subsegments, \",\")+\")\")\n\treturn nil\n}"),
	}
	fileg := &embedded.EmbeddedFile{
		Filename:    "crud/moderrors.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package moderrors\n\nvar (\n\t// RecordNotFoundError indicates record not found when using Repository.Get()\n\tRecordNotFoundError = errors.New(\"record not found\")\n\n\t// InFilterValueUnknownError indicates that value for IN condition is not known\n\tInFilterValueUnknownError = errors.New(\"unknown filter value type for IN condition\")\n\n\t// InFilterValueEmptyError indicates that slice of values provided for IN condition is empty\n\tInFilterValueEmptyError = errors.New(\"filter values for IN condition empty\")\n)"),
	}
	filei := &embedded.EmbeddedFile{
		Filename:    "crud/partials/delete_many.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("\n// DeleteMany deletes many {{.EntityName}} records from database using filter\nfunc (repo {{.EntityName}}Repositorium) DeleteMany(ctx context.Context, filters []ListFilter, tx *sql.Tx, autocommit bool) error {\n\tvar (\n\t\terr      error\n\t\tstmt     *sql.Stmt\n\t\tsegments []string\n\t\tvalues   []interface{}\n\t\tquery    string\n\t)\n\n\tif tx == nil {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t\t\n\t\ttx, err = repo.db.Begin()\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\n\t{{if .HasPreHook}}\n    if filters, err = repo.preDeleteMany(ctx, tx, filters); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\tfor i, filter := range filters {\n\t\tsegments = append(segments, filter.GetField()+\" \"+filter.GetOperation()+\" $\"+strconv.Itoa(i+1))\n\t\tvalues = append(values, filter.GetValue())\n\t}\n\n\tif len(segments) != 0 {\n\t\tquery = \" WHERE \" + strings.Join(segments, \" AND \")\n\t}\n\n\t{{range .Relationships}}{{if eq .Type \"many-many\"}}\n\tstmt, err = repo.db.Prepare(\"DELETE FROM {{.JoinTable}} WHERE {{.ThatID}} id IN (SELECT id FROM {{$.Table}}\"+query+\")\")\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\t_, err = stmt.Exec(values...)\n\tif err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}{{end}}\n\n\tstmt, err = repo.db.Prepare(\"DELETE FROM {{.Table}}\"+query)\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\t_, err = stmt.Exec(values...)\n\tif err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\t{{if .HasPostHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif err = repo.postDeleteMany(ctx, tx, filters); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif autocommit {\n\t\terr = tx.Commit()\n\t\tif err != nil {\n\t\t\ttx.Rollback()\n\t\t}\n\t}\n\n\treturn errors.WithStack(err)\n}"),
	}
	filej := &embedded.EmbeddedFile{
		Filename:    "crud/partials/delete_single.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("\n// Delete deletes a {{.EntityName}} record from database and sets id to nil\nfunc (repo {{.EntityName}}Repositorium) Delete(ctx context.Context, entity *{{.EntityName}}, tx *sql.Tx, autocommit bool) error {\n\tvar (\n\t\terr  error\n\t\tstmt *sql.Stmt\n\t)\n\tid := entity.ID\n\n\tif tx == nil {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\n\t\ttx, err = repo.db.Begin()\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tstmt, err = tx.Prepare(\"DELETE FROM {{.Table}} WHERE id = $1\")\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\t{{if .HasPreHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif err = repo.preDelete(ctx, tx, id); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t\n\t_, err = stmt.Exec(id)\n\tif err == nil {\n\t\tentity.ID = {{pkeyPropertyEmptyVal .PrimaryKey}}\n\t} else {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t\n\t{{range .Post}}{{.}}\n\t{{end}}\n\n\t{{if .HasPostHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t\n\tif err = repo.postDelete(ctx, tx, id); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif autocommit {\n\t\terr = tx.Commit()\n\t\tif err != nil {\n\t\t\ttx.Rollback()\n\t\t}\n\t}\n\n\treturn errors.WithStack(err)\n}"),
	}
	filek := &embedded.EmbeddedFile{
		Filename:    "crud/partials/get.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("\n// Get returns a single {{.EntityName}} from database by primary key\nfunc (repo {{.EntityName}}Repositorium) Get(ctx context.Context, id {{pkeyPropertyType .PrimaryKey}}) (*{{.EntityName}}, error) {\n\tvar (\n\t\trows   *sql.Rows\n\t\terr    error\n\t\tentity {{.EntityName}}\n\t)\n\t{{if .HasPreHook}}\n    if err = repo.preGet(ctx, id); err != nil {\n\t\treturn nil, err\n\t}\n    {{end}}\n\t\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn nil, err\n\t}\n\n\trows, err = repo.db.Query(\"SELECT {{.SQLFields}} FROM {{.Table}} WHERE id = $1 ORDER BY id ASC\", id)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdefer rows.Close()\n\tif rows.Next() {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\t{{range .Before}}{{.}}\n\t\t{{end}}\n\n\t\terr = rows.Scan({{.StructFields}})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t\n\t\t{{range .After}}{{.}}\n\t\t{{end}}\n\t} else {\n\t\treturn nil, moderrors.RecordNotFoundError\n\t}\n\t{{if .HasPostHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err = repo.postGet(ctx, &entity); err != nil {\n\t\treturn nil, err\n\t}\n\t{{end}}\n\n\treturn &entity, nil\n}\n\n// GetWithRel returns a single {{.EntityName}} from database by primary key; loads related entities\nfunc (repo {{.EntityName}}Repositorium) GetWithRel(ctx context.Context, id {{pkeyPropertyType .PrimaryKey}}) (*{{.EntityName}}, error) {\n\tentity, err := repo.Get(ctx, id)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t{{range .Related}}{{.}}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn nil, err\n\t}\n\t{{end}}\n\n\treturn entity, nil\n}"),
	}
	filel := &embedded.EmbeddedFile{
		Filename:    "crud/partials/insert.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("\n// Insert performs an SQL insert for {{.EntityName}} record and update instance with inserted id. Prefer using Save instead of Insert directly.\nfunc (repo {{.EntityName}}Repositorium) Insert(ctx context.Context, entity *{{.EntityName}}, tx *sql.Tx, autocommit bool) error {\n\tvar (\n\t\t{{- if pkeyIsAuto .PrimaryKey -}}\n\t\tid  {{pkeyPropertyType .PrimaryKey}}\n\t\t{{- end}}\n\t\terr  error\n\t\tstmt *sql.Stmt\n\t)\n\n\tif tx == nil {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t\t\n\t\ttx, err = repo.db.Begin()\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\t{{range .Before}}{{.}}\n\t{{end}}\n\n\t{{if eq .PrimaryKey \"serial\" -}}\n\tstmt, err = tx.Prepare(\"INSERT INTO {{.Table}} ({{.SQLFields}}) VALUES ({{.SQLPlaceholders}}) RETURNING id\")\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\t{{else}}\n\tstmt, err = tx.Prepare(\"INSERT INTO {{.Table}} ({{.SQLFields}}) VALUES ({{.SQLPlaceholders}})\")\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\t{{- end}}\n\n\t{{range .After}}{{.}}\n\t{{end}}\n\n\t{{if .HasPreHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\t\n\tif err = repo.preSave(ctx, tx, models.OperationInsert, entity); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{if eq .PrimaryKey \"serial\" -}}\n\terr = stmt.QueryRow({{.StructFields}}).Scan(&id)\n\tif err == nil {\n\t\tentity.ID = id\n\t} else {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{else}}\n\t{{if eq .PrimaryKey \"uuid\" -}}\n\tidUUID := uuid.NewV4()\n\tid = idUUID.String()\n\tentity.ID = id\n\t{{- end}}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\t_, err = stmt.Exec({{.StructFields}})\n\tif err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\n\t{{if .HasPostHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\tif err := repo.postSave(ctx, \"INSERT\", entity, tx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif autocommit {\n\t\terr = tx.Commit()\n\t\tif err != nil {\n\t\t\ttx.Rollback()\n\t\t}\n\t}\n\n\treturn errors.WithStack(err)\n}\n\n// InsertWithRel performs an SQL insert for {{.EntityName}} record and update instance with inserted id; including related entities. Prefer using Save instead of Insert directly.\nfunc (repo {{.EntityName}}Repositorium) InsertWithRel(ctx context.Context, entity *{{.EntityName}}, tx *sql.Tx, autocommit bool) error{\n\tvar (\n\t\t{{- if pkeyIsAuto .PrimaryKey -}}\n\t\tid  {{pkeyPropertyType .PrimaryKey}}\n\t\t{{- end}}\n\t\terr  error\n\t\tstmt *sql.Stmt\n\t)\n\n\tif tx == nil {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t\t\n\t\ttx, err = repo.db.Begin()\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\t{{range .Before}}{{.}}\n\t{{end}}\n\n\t{{if eq .PrimaryKey \"serial\" -}}\n\tstmt, err = tx.Prepare(\"INSERT INTO {{.Table}} ({{.SQLFields}}) VALUES ({{.SQLPlaceholders}}) RETURNING id\")\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\t{{else}}\n\tstmt, err = tx.Prepare(\"INSERT INTO {{.Table}} ({{.SQLFields}}) VALUES ({{.SQLPlaceholders}})\")\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\t{{- end}}\n\n\t{{range .After}}{{.}}\n\t{{end}}\n\n\t{{if .HasPreHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\t\n\tif err = repo.preSave(ctx, tx, models.OperationInsert, entity); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{if eq .PrimaryKey \"serial\" -}}\n\terr = stmt.QueryRow({{.StructFields}}).Scan(&id)\n\tif err == nil {\n\t\tentity.ID = id\n\t} else {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{else}}\n\t{{if eq .PrimaryKey \"uuid\" -}}\n\tidUUID := uuid.NewV4()\n\tid = idUUID.String()\n\tentity.ID = id\n\t{{- end}}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\t_, err = stmt.Exec({{.StructFields}})\n\tif err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\n\t{{range .Related}}{{.}}\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\n\t{{if .HasPostHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\tif err := repo.postSave(ctx, \"INSERT\", entity, tx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif autocommit {\n\t\terr = tx.Commit()\n\t\tif err != nil {\n\t\t\ttx.Rollback()\n\t\t}\n\t}\n\n\treturn errors.WithStack(err)\n}"),
	}
	filem := &embedded.EmbeddedFile{
		Filename:    "crud/partials/list.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("\n// List returns a slice containing {{.EntityName}} records\nfunc (repo {{.EntityName}}Repositorium) List(ctx context.Context, offset int, limit int, filters ...ListFilter) ([]*{{.EntityName}}, error) {\n\tvar (\n\t\tlist     []*{{.EntityName}}\n\t\tsegments []string\n\t\tvalues   []interface{}\n\t\terr      error\n\t\trows     *sql.Rows\n\t)\n\n\tquery := \"SELECT {{.SQLFields}} FROM {{.Table}}\"\n\t{{if .HasPreHook}}\n    if filters, err = repo.preList(ctx, filters); err != nil {\n\t\treturn nil, err\n\t}\n\t{{end}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i, filter := range filters {\n\t\tif filter.GetOperation() == \"IN\" || filter.GetOperation() == \"NOT IN\" {\n\t\t\tQueryAddIN(segments, values, &i, filter.GetField(), filter.GetValue(), \"NOT IN\" == filter.GetOperation())\n\t\t} else {\n\t\t\tsegments = append(segments, filter.GetField()+\" \"+filter.GetOperation()+\" $\"+strconv.Itoa(i+1))\n\t\t\tvalues = append(values, filter.GetValue())\n\t\t}\n\t}\n\n\tif len(segments) != 0 {\n\t\tquery += \" WHERE \" + strings.Join(segments, \" AND \")\n\t}\n\n\tquery += \" ORDER BY id ASC\"\n\n\tif limit > NoLimit {\n\t\tquery += \" LIMIT \"+strconv.Itoa(limit)\n\t}\n\n\tif offset > NoOffset {\n\t\tquery += \" OFFSET \"+strconv.Itoa(limit)\n\t}\n\n\trows, err = repo.db.Query(query, values...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdefer rows.Close()\n\tfor rows.Next() {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tvar entity {{.EntityName}}\n\t\t{{range .Before}}{{.}}\n\t\t{{end}}\n\n\t\terr = rows.Scan({{.StructFields}})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t\n\t\t{{range .After}}{{.}}\n\t\t{{end}}\n\n\t\tlist = append(list, &entity)\n\t}\n\t{{if .HasPostHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif list, err = repo.postList(ctx, list); err != nil {\n\t\treturn nil, err\n\t}\n\t{{end}}\n\treturn list, nil\n}\n\n// ListWithRel returns a slice containing {{.EntityName}} records; will also load related entities.\nfunc (repo {{.EntityName}}Repositorium) ListWithRel(ctx context.Context, offset int, limit int, filters ...ListFilter) ([]*{{.EntityName}}, error) {\n\tvar (\n\t\terr error\n\t\tentities []*{{.EntityName}}\n\t)\n\n\tentities, err = repo.List(ctx, offset, limit, filters...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t{{range .Related}}{{.}}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn nil, err\n\t}\n\t{{end}}\n\n\treturn entities, nil\n}\n\n// Select returns a slice containing {{.EntityName}} records according to a custom SQL condition\nfunc (repo {{.EntityName}}Repositorium) Select(ctx context.Context, offset int, limit int, condition string, values ...interface{}) ([]*{{.EntityName}}, error) {\n\tvar (\n\t\tlist     []*{{.EntityName}}\n\t\terr      error\n\t\trows     *sql.Rows\n\t)\n\n\tquery := \"SELECT {{.SQLFields}} FROM {{.Table}} \" + condition\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn nil, err\n\t}\n\n\tquery += \" ORDER BY id ASC\"\n\n\tif limit > -1 {\n\t\tquery += \" LIMIT \"+strconv.Itoa(limit)\n\t}\n\n\tif offset > -1 {\n\t\tquery += \" OFFSET \"+strconv.Itoa(limit)\n\t}\n\n\trows, err = repo.db.Query(query, values...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdefer rows.Close()\n\tfor rows.Next() {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tvar entity {{.EntityName}}\n\t\t{{range .Before}}{{.}}\n\t\t{{end}}\n\n\t\terr = rows.Scan({{.StructFields}})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t\n\t\t{{range .After}}{{.}}\n\t\t{{end}}\n\n\t\tlist = append(list, &entity)\n\t}\n\n\treturn list, nil\n}\n\n// SelectWithRel returns a slice containing {{.EntityName}} records according to a custom SQL condition; will also load related entities.\nfunc (repo {{.EntityName}}Repositorium) SelectWithRel(ctx context.Context, offset int, limit int, condition string, values ...interface{}) ([]*{{.EntityName}}, error) {\n\tvar (\n\t\terr error\n\t\tentities []*{{.EntityName}}\n\t)\n\n\tentities, err = repo.Select(ctx, offset, limit, condition, values...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn entities, nil\n}"),
	}
	filen := &embedded.EmbeddedFile{
		Filename:    "crud/partials/loadrelated_manymany.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("\n// Load{{.Funcname}} is a helper function to load related {{.PropertyName}} entities\nfunc (repo {{.ThisEntity}}Repositorium) Load{{.Funcname}}(ctx context.Context, entities ...*{{.ThisEntity}}) error {\n\tvar (\n\t\terr error\n\t\tplaceholder string\n\t\tvalues  []interface{}\n\t\tindices = make(map[{{.ThisType}}][]*{{.ThisEntity}})\n\t)\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tc := 1\n\tfor _, entity := range entities {\n\t\tplaceholder += \"$\" + strconv.Itoa(c) + \",\"\n\t\tindices[entity.ID] = append(indices[entity.ID], entity)\n\t\tvalues = append(values, entity.ID)\n\t\tc++\n\t}\n\tplaceholder = strings.TrimRight(placeholder, \",\")\n\n\trows, err := repo.db.Query(`\n\t\tSELECT j.{{.ThisID}}, {{.SQLFields}} FROM {{.ThatTable}} t \n\t\tINNER JOIN {{.JoinTable}} j ON t.id = j.{{.ThatID}}\n\t\tWHERE j.{{.ThisID}} IN (`+placeholder+`)\n\t`, values...)\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tfor rows.Next() {\n\t\tvar (\n\t\t\tthisID {{.ThisType}}\n\t\t\tentity {{.ThatEntity}}\n\t\t)\n\t\t{{range .Before}}{{.}}\n\t\t{{end}}\n\t\terr = rows.Scan(&thisID, {{.StructFields}})\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t\t{{range .After}}{{.}}\n\t\t{{end}}\n\t\t\n\t\tfor _, ent := range indices[thisID] {\n\t\t\tent.{{.PropertyName}} = append(ent.{{.PropertyName}}, &entity)\n\t\t}\n\t\t\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\n\treturn nil\n}"),
	}
	fileo := &embedded.EmbeddedFile{
		Filename:    "crud/partials/loadrelated_manyone.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("\n// Load{{.Funcname}} is a helper function to load related {{.PropertyName}} entities\nfunc (repo {{.ThisEntity}}Repositorium) Load{{.Funcname}}(ctx context.Context, entities ...*{{.ThisEntity}}) error {\n\tvar (\n\t\terr error\n\t\tplaceholder string\n\t\tvalues  []interface{}\n\t\tindices = make(map[{{.ThatType}}][]*{{.ThisEntity}})\n\t)\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tc := 1\n\tfor _, entity := range entities {\n\t\tplaceholder += \"$\" + strconv.Itoa(c) + \",\"\n\t\tindices[entity.{{.ThisID}}] = append(indices[entity.{{.ThisID}}], entity)\n\t\tvalues = append(values, entity.{{.ThisID}})\n\t\tc++\n\t}\n\tplaceholder = strings.TrimRight(placeholder, \",\")\n\trows, err := repo.db.Query(`\n\t\tSELECT id, {{.SQLFields}} FROM {{.ThatTable}} WHERE id IN (`+placeholder+`)\n\t`, values...)\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tfor rows.Next() {\n\t\tvar (\n\t\t\tthatID {{.ThatType}}\n\t\t\tthatEntity {{.ThatEntity}}\n\t\t)\n\t\t{{range .Before}}{{.}}\n\t\t{{end}}\n\t\terr = rows.Scan(&thatID, {{.StructFields}})\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t\t{{range .After}}{{.}}\n\t\t{{end}}\n\n\t\tfor _, ent := range indices[thatID] {\n\t\t\tent.{{.PropertyName}} = &thatEntity\n\t\t}\n\t\t\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\n\treturn nil\n}"),
	}
	filep := &embedded.EmbeddedFile{
		Filename:    "crud/partials/loadrelated_onemany.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("\n// Load{{.Funcname}} is a helper function to load related {{.PropertyName}} entities\nfunc (repo {{.ThisEntity}}Repositorium) Load{{.Funcname}}(ctx context.Context, entities ...*{{.ThisEntity}}) error {\n\tvar (\n\t\terr error\n\t\tplaceholder string\n\t\tvalues  []interface{}\n\t\tindices = make(map[{{.ThisType}}][]*{{.ThisEntity}})\n\t)\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tc := 1\n\tfor _, entity := range entities {\n\t\tplaceholder += \"$\" + strconv.Itoa(c) + \",\"\n\t\tindices[entity.ID] = append(indices[entity.ID], entity)\n\t\tvalues = append(values, entity.ID)\n\t\tc++\n\t}\n\tplaceholder = strings.TrimRight(placeholder, \",\")\n\n\trows, err := repo.db.Query(`\n\t\tSELECT {{.ThisID}}, {{.SQLFields}} FROM {{.ThatTable}} WHERE {{.ThisID}} IN (`+placeholder+`)\n\t`, values...)\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tfor rows.Next() {\n\t\tvar (\n\t\t\tthisID {{.ThisType}}\n\t\t\tentity {{.ThatEntity}}\n\t\t)\n\t\t\n\t\t{{range .Before}}{{.}}\n\t\t{{end}}\n\t\terr = rows.Scan(&thisID, {{.StructFields}})\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t\t{{range .After}}{{.}}\n\t\t{{end}}\n\t\t\n\t\tfor _, ent := range indices[thisID] {\n\t\t\tent.{{.PropertyName}} = append(ent.{{.PropertyName}}, &entity)\n\t\t}\n\t\t\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\n\treturn nil\n}"),
	}
	fileq := &embedded.EmbeddedFile{
		Filename:    "crud/partials/merge.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("\n// Merge performs an SQL merge for {{.EntityName}} record.\nfunc (repo {{.EntityName}}Repositorium) Merge(ctx context.Context, entity *{{.EntityName}}, tx *sql.Tx, autocommit bool) error {\n\tvar (\n\t\terr error\n\t\tstmt *sql.Stmt\n\t)\n\n\tif tx == nil {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t\t\n\t\ttx, err = repo.db.Begin()\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\n\tif entity.ID == {{pkeyPropertyEmptyVal .PrimaryKey}} {\n\t\treturn {{.EntityName}}Repo.Insert(ctx, entity, tx, autocommit)\n\t}\n\n\t{{range .Before}}{{.}}\n\t{{end}}\n\n\tstmt, err = tx.Prepare(`INSERT INTO {{.Table}} ({{.SQLFieldsInsert}}) VALUES ({{.SQLPlaceholders}}) \n\tON CONFLICT (id) DO UPDATE SET {{.SQLFieldsUpdate}}`)\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\t{{if .HasPreHook}}\n    if err = repo.preSave(ctx, tx, models.OperationMerge, entity); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\t_, err = stmt.Exec({{.StructFields}})\n\tif err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\t{{if .HasPostHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\tif err = repo.postSave(ctx, \"MERGE\", entity, tx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif autocommit {\n\t\terr = tx.Commit()\n\t\tif err != nil {\n\t\t\ttx.Rollback()\n\t\t}\n\t}\n\n\treturn errors.WithStack(err)\n}\n\n// MergeWithRel performs an SQL merge for {{.EntityName}} record.\nfunc (repo {{.EntityName}}Repositorium) MergeWithRel(ctx context.Context, entity *{{.EntityName}}, tx *sql.Tx, autocommit bool) error {\n\tvar (\n\t\terr error\n\t\tstmt *sql.Stmt\n\t)\n\n\tif tx == nil {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t\t\n\t\ttx, err = repo.db.Begin()\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\n\tif entity.ID == {{pkeyPropertyEmptyVal .PrimaryKey}} {\n\t\treturn {{.EntityName}}Repo.Insert(ctx, entity, tx, autocommit)\n\t}\n\n\t{{range .Before}}{{.}}\n\t{{end}}\n\n\tstmt, err = tx.Prepare(`INSERT INTO {{.Table}} ({{.SQLFieldsInsert}}) VALUES ({{.SQLPlaceholders}}) \n\tON CONFLICT (id) DO UPDATE SET {{.SQLFieldsUpdate}}`)\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\t{{if .HasPreHook}}\n    if err = repo.preSave(ctx, tx, models.OperationMerge, entity); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\t_, err = stmt.Exec({{.StructFields}})\n\tif err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\t{{range .Related}}{{.}}\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\n\t{{if .HasPostHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\tif err = repo.postSave(ctx, \"MERGE\", entity, tx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif autocommit {\n\t\terr = tx.Commit()\n\t\tif err != nil {\n\t\t\ttx.Rollback()\n\t\t}\n\t}\n\n\treturn errors.WithStack(err)\n}"),
	}
	filer := &embedded.EmbeddedFile{
		Filename:    "crud/partials/save.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("\n// Save either inserts or updates a {{.EntityName}} record based on whether or not id is nil\nfunc (repo {{.EntityName}}Repositorium) Save(ctx context.Context, entity *{{.EntityName}}, tx *sql.Tx, autocommit bool) error {\n\t{{if pkeyIsAuto .PrimaryKey -}}\n\tif entity.ID == {{pkeyPropertyEmptyVal .PrimaryKey}} {\n\t\treturn repo.Insert(ctx, entity, tx, autocommit)\n\t}\n\treturn repo.Update(ctx, entity, tx, autocommit)\n\t{{- else -}}\n\tif entity.ID == {{pkeyPropertyEmptyVal .PrimaryKey}} {\n\t\treturn entity, errors.New(\"primary key cannot be nil\")\n\t}\n\treturn repo.Merge(ctx, entity, tx, autocommit)\n\t{{end -}}\n}\n\n// SaveWithRel either inserts or updates a {{.EntityName}} record based on whether or not id is nil; will also save related entities\nfunc (repo {{.EntityName}}Repositorium) SaveWithRel(ctx context.Context, entity *{{.EntityName}}, tx *sql.Tx, autocommit bool) error {\n\t{{if pkeyIsAuto .PrimaryKey -}}\n\tif entity.ID == {{pkeyPropertyEmptyVal .PrimaryKey}} {\n\t\treturn repo.InsertWithRel(ctx, entity, tx, autocommit)\n\t}\n\treturn repo.UpdateWithRel(ctx, entity, tx, autocommit)\n\t{{- else -}}\n\tif entity.ID == {{pkeyPropertyEmptyVal .PrimaryKey}} {\n\t\treturn entity, errors.New(\"primary key cannot be nil\")\n\t}\n\treturn repo.MergeWithRel(ctx, entity, tx, autocommit)\n\t{{end -}}\n}"),
	}
	files := &embedded.EmbeddedFile{
		Filename:    "crud/partials/saverelated.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("\n// Save{{.Funcname}} is a helper function to save related {{.PropertyName}} in a pivot table (many-many relationship)\nfunc (repo {{.EntityName}}Repositorium) Save{{.Funcname}}(ctx context.Context, tx *sql.Tx, autocommit bool, idthis {{pkeyPropertyType .PrimaryKey}}, relatives ...{{.ThatType}}) error {\n\tvar (\n\t\tstmt *sql.Stmt\n\t\terr  error\n\t)\n\n\tif tx == nil {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t\t\n\t\ttx, err = repo.db.Begin()\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\t\n\tstmt, err = tx.Prepare(\"DELETE FROM {{.Table}} WHERE {{.ThatColumn}} = $1\")\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\t_, err = stmt.Exec(idthis)\n\tif err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\tstmt, err = tx.Prepare(\"INSERT INTO {{.Table}} ({{.ThatColumn}}, {{.ThisColumn}}) VALUES ($1, $2)\")\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tfor _, rel := range relatives {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\ttx.Rollback()\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t\t\n\t\t_, err = stmt.Exec(idthis, rel.ID)\n\t\tif err != nil {\n\t\t\ttx.Rollback()\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\n\tif autocommit {\n\t\terr = tx.Commit()\n\t\tif err != nil {\n\t\t\ttx.Rollback()\n\t\t}\n\t}\n\n\treturn errors.WithStack(err)\n}\n\n// Save{{.Funcname}}IDs is a helper function to save related {{.PropertyName}} IDs in a pivot table (many-many relationship)\nfunc (repo {{.EntityName}}Repositorium) Save{{.Funcname}}IDs(ctx context.Context, tx *sql.Tx, autocommit bool, idthis {{pkeyPropertyType .PrimaryKey}}, relatives ...{{pkeyPropertyType .ThatPrimaryKey}}) error {\n\tvar (\n\t\tstmt *sql.Stmt\n\t\terr  error\n\t)\n\n\tif tx == nil {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t\t\n\t\ttx, err = repo.db.Begin()\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\t\n\tstmt, err = tx.Prepare(\"DELETE FROM {{.Table}} WHERE {{.ThatColumn}} = $1\")\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\t_, err = stmt.Exec(idthis)\n\tif err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\tstmt, err = tx.Prepare(\"INSERT INTO {{.Table}} ({{.ThatColumn}}, {{.ThisColumn}}) VALUES ($1, $2)\")\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\tfor _, relid := range relatives {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\ttx.Rollback()\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t\t\n\t\t_, err = stmt.Exec(idthis, relid)\n\t\tif err != nil {\n\t\t\ttx.Rollback()\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\n\tif autocommit {\n\t\terr = tx.Commit()\n\t\tif err != nil {\n\t\t\ttx.Rollback()\n\t\t}\n\t}\n\n\treturn errors.WithStack(err)\n}"),
	}
	filet := &embedded.EmbeddedFile{
		Filename:    "crud/partials/update.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("\n// Update Will execute an SQLUpdate Statement for {{.EntityName}} in the database. Prefer using Save instead of Update directly.\nfunc (repo {{.EntityName}}Repositorium) Update(ctx context.Context, entity *{{.EntityName}}, tx *sql.Tx, autocommit bool) error {\n\tvar (\n\t\terr error\n\t\tstmt *sql.Stmt\n\t)\n\n\tif tx == nil {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\n\t\ttx, err = repo.db.Begin()\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\t\n\t{{range .Before}}{{.}}\n\t{{end}}\n\n\tstmt, err = tx.Prepare(\"UPDATE {{.Table}} SET {{.SQLFields}} WHERE id = $1\")\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\t{{range .After}}{{.}}\n\t{{end}}\n\n\t{{if .HasPreHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n    if err = repo.preSave(ctx, tx, models.OperationUpdate, entity); err != nil {\n\t\ttx.Rollback()\n        return errors.WithStack(err)\n\t}\n\t{{end}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t_, err = stmt.Exec({{.StructFields}})\n\tif err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\t{{if .HasPostHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif err = repo.postSave(ctx, \"UPDATE\", entity, tx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif autocommit {\n\t\terr = tx.Commit()\n\t\tif err != nil {\n\t\t\ttx.Rollback()\n\t\t}\n\t}\n\n\treturn errors.WithStack(err)\n}\n\n// UpdateWithRel Will execute an SQLUpdate Statement for {{.EntityName}} in the database; including related entities. Prefer using Save instead of Update directly.\nfunc (repo {{.EntityName}}Repositorium) UpdateWithRel(ctx context.Context, entity *{{.EntityName}}, tx *sql.Tx, autocommit bool) error {\n\tvar (\n\t\terr error\n\t\tstmt *sql.Stmt\n\t)\n\n\tif tx == nil {\n\t\tif err = util.CheckContext(ctx); err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\n\t\ttx, err = repo.db.Begin()\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t}\n\t\n\t{{range .Before}}{{.}}\n\t{{end}}\n\n\tstmt, err = tx.Prepare(\"UPDATE {{.Table}} SET {{.SQLFields}} WHERE id = $1\")\n\tif err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n\t{{range .After}}{{.}}\n\t{{end}}\n\n\t{{if .HasPreHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\treturn errors.WithStack(err)\n\t}\n\n    if err = repo.preSave(ctx, tx, models.OperationUpdate, entity); err != nil {\n\t\ttx.Rollback()\n        return errors.WithStack(err)\n\t}\n\t{{end}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t_, err = stmt.Exec({{.StructFields}})\n\tif err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\t{{range .Related}}{{.}}\n\tif err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\n\t{{if .HasPostHook}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif err = repo.postSave(ctx, \"UPDATE\", entity, tx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\t{{end}}\n\tif err = util.CheckContext(ctx); err != nil {\n\t\ttx.Rollback()\n\t\treturn errors.WithStack(err)\n\t}\n\n\tif autocommit {\n\t\terr = tx.Commit()\n\t\tif err != nil {\n\t\t\ttx.Rollback()\n\t\t}\n\t}\n\n\treturn errors.WithStack(err)\n}"),
	}
	fileu := &embedded.EmbeddedFile{
		Filename:    "crud/protobuf.proto.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("syntax = \"proto3\";\n\npackage models;\noption go_package = \"{{.ProjectImportPath}}/models\";\n\n{{range .Imports -}}\n{{.}}\n{{- end}}\n\n{{ range .Entities -}}\n// {{.Name}} {{.Description}}\nmessage {{.Name}} { {{ range .Fields }}\n\t{{.Type}} {{.Name}} = {{.Index}};\n{{- end}}\n}\n\n{{end}}"),
	}
	filev := &embedded.EmbeddedFile{
		Filename:    "http.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package app\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t\"github.com/gorilla/mux\"\n)\n\n// ServeHTTP starts an http server\nfunc ServeHTTP(listen string, route func(router *mux.Router) error) {\n\tvar err error\n\tsigs := make(chan os.Signal, 1)\n\tsignal.Notify(sigs, syscall.SIGTERM)\n\n\trouter := mux.NewRouter()\n\terr = route(router)\n\n\tif err != nil {\n\t\tlog.Fatal(\"Failed to register routes: \", err)\n\t}\n\n\tgo func() {\n\t\terr = http.ListenAndServe(listen, router)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"Failed to start http server: \", err)\n\t\t}\n\t}()\n\n\tlog.Println(\"Listening on \" + listen)\n\t<-sigs\n\tlog.Println(\"Server stopped\")\n}\n"),
	}
	filew := &embedded.EmbeddedFile{
		Filename:    "rest.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package {{.Package}}\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/gorilla/mux\"\n)\n\ntype responseSingle struct {\n\tStatus   bool      `json:\"status\"`\n\tMessages []message `json:\"messages\"`\n\tEntity   *{{.Entity.Name}} `json:\"entity\"`\n}\n\ntype responseList struct {\n\tStatus   bool                `json:\"status\"`\n\tMessages []message           `json:\"messages\"`\n\tEntities []*{{.Entity.Name}} `json:\"entities\"`\n}\n\ntype message struct {\n\tType    rune   `json:\"type\"`\n\tMessage string `json:\"message\"`\n}\n\n//RegisterRoutes registers routes with a mux Router\nfunc RegisterRoutes(router *mux.Router) {\n\t{{if .Entity.Rest.Read}}router.HandleFunc(\"/{{.Endpoint}}/{id}\", RestGet).Methods(\"GET\"){{end}}\n\t{{if .Entity.Rest.ReadList}}router.HandleFunc(\"/{{.Endpoint}}\", RestList).Methods(\"GET\"){{end}}\n\t{{if .Entity.Rest.Create}}router.HandleFunc(\"/{{.Endpoint}}\", RestCreate).Methods(\"POST\"){{end}}\n\t{{if .Entity.Rest.Update}}router.HandleFunc(\"/{{.Endpoint}}/{id}\", RestUpdate).Methods(\"PUT\"){{end}}\n\t{{if .Entity.Rest.Delete}}router.HandleFunc(\"/{{.Endpoint}}/{id}\", RestDelete).Methods(\"DELETE\"){{end}}\n}\n\n{{if .Entity.Rest.Read}}\n//RestGet is a REST endpoint for GET /{{.Endpoint}}/{id}\nfunc RestGet(w http.ResponseWriter, r *http.Request) {\n\tvar (\n\t\tid       {{pkeyPropertyType .Entity.PrimaryKey}}\n\t\terr      error\n\t\tresponse responseSingle\n\t\t{{if or .Entity.Rest.Hooks.PreRead .Entity.Rest.Hooks.PostRead -}}\n\t\tstop     bool\n\t\t{{- end}}\n\t)\n\n\tvars := mux.Vars(r)\n\t{{if pkeyIsInt .Entity.PrimaryKey -}}\n\tvalid := false\n\tif _, ok := vars[\"id\"]; ok {\n\t\tid, err = strconv.ParseInt(vars[\"id\"], 10, 64)\n\t\tvalid = err == nil && id > 0\n\t}\n\t{{else}}\n\tid, valid := vars[\"id\"]\n\t{{- end}}\n\n\tif !valid {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Invalid ID\"}]}`)\n\t\treturn\n\t}\n\n\t{{if .Entity.Rest.Hooks.PreRead}}\n    if stop, err = restPreGet(w, r, id); err != nil || stop {\n        return\n    }\n    {{end}}\n\n\tresponse.Entity, err = Get(id)\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"An error occurred\"}]}`)\n\t\treturn\n\t}\n\n\tif response.Entity == nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusNotFound)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Entity not found\"}]}`)\n\t\treturn\n\t}\n\n\t{{if .Entity.Rest.Hooks.PostRead}}\n    if stop, err = restPostGet(w, r, response.Entity); err != nil || stop {\n        return\n    }\n    {{end}}\n\n\tresponse.Status = true\n\tresponse.Status = true\t\n\toutput, err := json.Marshal(response)\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"JSON encoding failed\"}]}`)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(http.StatusOK)\n\tfmt.Fprint(w, string(output))\n}\n{{end}}\n\n{{if .Entity.Rest.ReadList}}\n//RestList is a REST endpoint for GET /{{.Endpoint}}\nfunc RestList(w http.ResponseWriter, r *http.Request) {\n\tvar (\n\t\terr      error\n\t\tresponse responseList\n\t\tfilters  []models.ListFilter\n\t\t{{if or .Entity.Rest.Hooks.PreList .Entity.Rest.Hooks.PostList}}stop     bool{{end}}\n\t)\n\t{{range .Entity.Fields}}{{if .Filterable}}\n\t{{if eq .Property.Type \"bool\"}}\n\tif val := query.Get(\"{{.Serialized}}\"); val != \"\" {\n\t\tif t, e := strconv.ParseBool(val); e == nil {\n\t\t\tfilters = append(filters, models.ListFilter{Field:\"{{.Schema.Field}}\", Operation:\"=\", Value:t})\n\t\t}\n\t}\n\t{{end}}\n\t{{if eq .Property.Type \"string\"}}\n\tif val := query.Get(\"{{.Serialized}}\"); val != \"\" {\n\t\tfilters = append(filters, models.ListFilter{Field:\"{{.Schema.Field}}\", Operation:\"=\", Value:val})\n\t}\n\n\tif val := query.Get(\"{{.Serialized}}-lk\"); val != \"\" {\n\t\tfilters = append(filters, models.ListFilter{Field:\"{{.Schema.Field}}\", Operation:\"LIKE\", Value:\"%\" + val + \"%\"})\n\t}\n\t{{end}}\n\t{{if eq .Property.Type \"time.Time\"}}\n\tif val := query.Get(\"{{.Serialized}}\"); len(val) == 16 {\n\t\tif t, e := time.Parse(\"2006-01-02-15-04\", val); e == nil {\n\t\t\tfilters = append(filters, models.ListFilter{Field:\"{{.Schema.Field}}\", Operation:\"=\", Value:t})\n\t\t}\n\t}\n\n\tif val := query.Get(\"{{.Serialized}}-gt\"); len(val) == 16 {\n\t\tif t, e := time.Parse(\"2006-01-02-15-04\", val); e == nil {\n\t\t\tfilters = append(filters, models.ListFilter{Field:\"{{.Schema.Field}}\", Operation:\">\", Value:t})\n\t\t}\n\t}\n\n\tif val := query.Get(\"{{.Serialized}}-ge\"); len(val) == 16 {\n\t\tif t, e := time.Parse(\"2006-01-02-15-04\", val); e == nil {\n\t\t\tfilters = append(filters, models.ListFilter{Field:\"{{.Schema.Field}}\", Operation:\">=\", Value:t})\n\t\t}\n\t}\n\n\tif val := query.Get(\"{{.Serialized}}-lt\"); len(val) == 16 {\n\t\tif t, e := time.Parse(\"2006-01-02-15-04\", val); e == nil {\n\t\t\tfilters = append(filters, models.ListFilter{Field:\"{{.Schema.Field}}\", Operation:\"<\", Value:t})\n\t\t}\n\t}\n\n\tif val := query.Get(\"{{.Serialized}}-le\"); len(val) == 16 {\n\t\tif t, e := time.Parse(\"2006-01-02-15-04\", val); e == nil {\n\t\t\tfilters = append(filters, models.ListFilter{Field:\"{{.Schema.Field}}\", Operation:\"<=\", Value:t})\n\t\t}\n\t}\n\t{{end}}\n\t{{end}}{{end}}\n\n\t{{if .Entity.Rest.Hooks.PreList}}\n    if filters, stop, err = restPreList(w, r, filters); err != nil || stop {\n        return\n    }\n    {{end}}\n\n\tresponse.Entities, err = List(filters)\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"An error occurred\"}]}`)\n\t\treturn\n\t}\n\n\t{{if .Entity.Rest.Hooks.PostList}}\n    if response.Entities, stop, err = restPostList(w, r, response.Entities); err != nil || stop {\n        return\n    }\n    {{end}}\n\n\tresponse.Status = true\n\tresponse.Status = true\t\n\toutput, err := json.Marshal(response)\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"JSON encoding failed\"}]}`)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(http.StatusOK)\n\tfmt.Fprint(w, string(output))\n}\n{{end}}\n\n{{if .Entity.Rest.Create}}\n//RestCreate is a REST endpoint for POST /{{.Endpoint}}\nfunc RestCreate(w http.ResponseWriter, r *http.Request) {\n\tvar (\n\t\terr      error\n\t\trawbody  []byte\n\t\tresponse responseSingle\n\t\ttx       *sql.Tx\n\t\t{{if or .Entity.Rest.Hooks.PreCreate .Entity.Rest.Hooks.PostCreate}}stop     bool{{end}}\n\t)\n\n\trawbody, err = ioutil.ReadAll(r.Body)\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Failed to read body\"}]}`)\n\t\treturn\n\t}\n\n\tresponse.Entity = New()\n\terr = json.Unmarshal(rawbody, response.Entity)\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Failed to decode body\"}]}`)\n\t\treturn\n\t}\n\t{{if pkeyIsAuto .Entity.PrimaryKey -}}\n\tresponse.Entity.ID = nil\n\t{{- end}}\n\n\ttx, err = db.Begin()\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Failed to process\"}]}`)\n\t\treturn\n\t}\n\n\t{{if .Entity.Rest.Hooks.PreCreate}}\n\tif stop, err = restPreCreate(w, r, response.Entity, tx); err != nil {\n\t\ttx.Rollback()\n\t\treturn\n\t} else if stop {\n\t\treturn\n\t}\n\t{{end}}\n\n\terr = response.Entity.Save(tx, false)\n\tif err != nil {\n\t\ttx.Rollback()\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Save failed\"}]}`)\n\t\treturn\n\t}\n\n\t{{if .Entity.Rest.Hooks.PostCreate}}\n\tif stop, err = restPostCreate(w, r, response.Entity, tx); err != nil {\n\t\ttx.Rollback()\n\t\treturn\n\t} else if stop {\n\t\treturn\n\t}\n\t{{end}}\n\t\n\tif err = tx.Commit(); err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"E\", \"message\": \"RestCreate could not commit transaction\"}]}`)\n\t\treturn\n\t}\n\n\tresponse.Status = true\t\n\toutput, err := json.Marshal(response)\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"JSON encoding failed\"}]}`)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(http.StatusOK)\n\tfmt.Fprint(w, string(output))\n}\n{{end}}\n\n{{if .Entity.Rest.Update}}\n//RestUpdate is a REST endpoint for PUT /{{.Endpoint}}/{id}\nfunc RestUpdate(w http.ResponseWriter, r *http.Request) {\n\tvar (\n\t\terr      error\n\t\trawbody  []byte\n\t\tid       {{pkeyPropertyType .Entity.PrimaryKey}}\n\t\tresponse responseSingle\n\t\ttx       *sql.Tx\n\t\t{{if or .Entity.Rest.Hooks.PreUpdate .Entity.Rest.Hooks.PostUpdate -}}\n\t\tstop     bool\n\t\t{{- end}}\n\t)\n\n\tvars := mux.Vars(r)\n\t{{if pkeyIsInt .Entity.PrimaryKey -}}\n\tvalid := false\n\tif _, ok := vars[\"id\"]; ok {\n\t\tid, err = strconv.ParseInt(vars[\"id\"], 10, 64)\n\t\tvalid = err == nil && id > 0\n\t}\n\t{{else}}\n\tid, valid := vars[\"id\"]\n\t{{- end}}\n\n\tif !valid {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Invalid ID\"}]}`)\n\t\treturn\n\t}\n\n\tresponse.Entity, err = Get(id)\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"An error occurred\"}]}`)\n\t\treturn\n\t}\n\n\tif response.Entity == nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusNotFound)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Entity not found\"}]}`)\n\t\treturn\n\t}\n\n\trawbody, err = ioutil.ReadAll(r.Body)\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Failed to read body\"}]}`)\n\t\treturn\n\t}\n\n\terr = json.Unmarshal(rawbody, response.Entity)\n\tif err != nil {\n\t\tif err != nil {\n\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Failed to decode body\"}]}`)\n\t\t\treturn\n\t\t}\n\t}\n\tresponse.Entity.ID = &id\n\n\ttx, err = db.Begin()\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Failed to process\"}]}`)\n\t\treturn\n\t}\n\n\t{{if .Entity.Rest.Hooks.PreUpdate}}\n    if stop, err = restPreUpdate(w, r, response.Entity, tx); err != nil {\n\t\ttx.Rollback()\n        return\n    } else if stop {\n\t\treturn\n\t}\n    {{end}}\n\n\terr = response.Entity.Save(tx, false)\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Save failed\"}]}`)\n\t\treturn\n\t}\n\n\t{{if .Entity.Rest.Hooks.PostUpdate}}\n    if stop, err = restPostUpdate(w, r, response.Entity, tx); err != nil {\n\t\ttx.Rollback()\n        return\n    } else if stop {\n\t\treturn\n\t}\n\t{{end}}\n\t\n\tif err = tx.Commit(); err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"E\", \"message\": \"RestUpdate could not commit transaction\"}]}`)\n\t\treturn\n\t}\n\n\tresponse.Status = true\t\n\toutput, err := json.Marshal(response)\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"JSON encoding failed\"}]}`)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(http.StatusOK)\n\tfmt.Fprint(w, string(output))\n}\n{{end}}\n\n{{if .Entity.Rest.Delete}}\n//RestDelete is a REST endpoint for DELETE /{{.Endpoint}}/{id}\nfunc RestDelete(w http.ResponseWriter, r *http.Request) {\n\tvar (\n\t\tid       {{pkeyPropertyType .Entity.PrimaryKey}}\n\t\terr      error\n\t\tresponse responseSingle\n\t\ttx       *sql.Tx\n\t\t{{if or .Entity.Rest.Hooks.PreDelete .Entity.Rest.Hooks.PostDelete -}}\n\t\tstop     bool\n\t\t{{- end}}\n\t)\n\n\tvars := mux.Vars(r)\n\t{{if pkeyIsInt .Entity.PrimaryKey -}}\n\tvalid := false\n\tif _, ok := vars[\"id\"]; ok {\n\t\tid, err = strconv.ParseInt(vars[\"id\"], 10, 64)\n\t\tvalid = err == nil && id > 0\n\t}\n\t{{else}}\n\tid, valid := vars[\"id\"]\n\t{{- end}}\n\n\tif !valid {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Invalid ID\"}]}`)\n\t\treturn\n\t}\n\n\tresponse.Entity, err = Get(id)\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"An error occurred\"}]}`)\n\t\treturn\n\t}\n\n\tif response.Entity == nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusNotFound)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Entity not found\"}]}`)\n\t\treturn\n\t}\n\n\ttx, err = db.Begin()\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Failed to process\"}]}`)\n\t\treturn\n\t}\n\t{{if .Entity.Rest.Hooks.PreDelete}}\n\tif stop, err = restPreDelete(w, r, id, tx); err != nil {\n\t\ttx.Rollback()\n\t\treturn\n\t} else if stop {\n\t\treturn\n\t}\n    {{end}}\n\terr = response.Entity.Delete(tx, false)\n\tif err != nil {\n\t\ttx.Rollback()\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"Delete failed\"}]}`)\n\t\treturn\n\t}\n\t{{if .Entity.Rest.Hooks.PostDelete}}\n\tif stop, err = restPostDelete(w, r, id, tx); err != nil {\n\t\ttx.Rollback()\n\t\treturn\n\t} else if stop {\n\t\treturn\n\t}\n\t{{end}}\n\tif err = tx.Commit(); err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"E\", \"message\": \"RestDelete could not commit transaction\"}]}`)\n\t\treturn\n\t}\n\n\tresponse.Status = true\t\n\toutput, err := json.Marshal(response)\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, `{\"status\": false, \"messages\": [{\"type\": \"error\", \"text\": \"JSON encoding failed\"}]}`)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(http.StatusOK)\n\tfmt.Fprint(w, string(output))\n}\n{{end}}\n"),
	}
	filex := &embedded.EmbeddedFile{
		Filename:    "rest_hooks.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package {{.Package}}\n\nimport (\n\t\"database/sql\"\n\t\"net/http\"\n)\n\n{{if .Hooks.PreRead}}\nfunc restPreGet(w http.ResponseWriter, r *http.Request, id {{pkeyPropertyType .Entity.PrimaryKey}}) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n{{if .Hooks.PostRead}}\nfunc restPostGet(w http.ResponseWriter, r *http.Request, entity *{{.Entity.Name}}) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n\n{{if .Hooks.PreList}}\nfunc restPreList(w http.ResponseWriter, r *http.Request, filters []models.ListFilter) ([]models.ListFilter, bool, error) {\n\treturn filters, false, nil\n}\n{{end}}\n{{if .Hooks.PostList}}\nfunc restPostList(w http.ResponseWriter, r *http.Request, list []*{{.Entity.Name}}) ([]*{{.Entity.Name}}, bool, error) {\n\treturn list, false, nil\n}\n{{end}}\n\n{{if .Hooks.PreCreate}}\nfunc restPreCreate(w http.ResponseWriter, r *http.Request, entity *{{.Entity.Name}}, tx *sql.Tx) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n{{if .Hooks.PostCreate}}\nfunc restPostCreate(w http.ResponseWriter, r *http.Request, entity *{{.Entity.Name}}, tx *sql.Tx) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n\n{{if .Hooks.PreUpdate}}\nfunc restPreUpdate(w http.ResponseWriter, r *http.Request, entity *{{.Entity.Name}}, tx *sql.Tx) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n{{if .Hooks.PostUpdate}}\nfunc restPostUpdate(w http.ResponseWriter, r *http.Request, entity *{{.Entity.Name}}, tx *sql.Tx) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n\n{{if .Hooks.PreDelete}}\nfunc restPreDelete(w http.ResponseWriter, r *http.Request, id {{pkeyPropertyType .Entity.PrimaryKey}}, tx *sql.Tx) (bool, error) {\n\treturn false, nil\n}\n{{end}}\n{{if .Hooks.PostDelete}}\nfunc restPostDelete(w http.ResponseWriter, r *http.Request, id {{pkeyPropertyType .Entity.PrimaryKey}}, tx *sql.Tx) (bool, error) {\n\treturn false, nil\n}\n{{end}}"),
	}
	filey := &embedded.EmbeddedFile{
		Filename:    "schema.sql.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("DROP TABLE IF EXISTS {{.Entity.Table}};\n\nCREATE TABLE {{.Entity.Table}} (\n\t\"id\" {{pkeyFieldType .Entity.PrimaryKey}},\n\t{{- range $i, $e := .Entity.Fields}}{{if ne .Schema.Field \"\"}}\n\t\"{{.Schema.Field}}\" {{$e.Schema.Type}} NOT NULL\n\t{{- if ne .Schema.Default \"\"}} DEFAULT {{.Schema.Default}}{{end}},\n\t{{- end}}{{- end}}\n\t{{- range .RelatedFields}}\n\t\"{{.Name}}\" {{.Type}} NOT NULL,\n\t{{end}}\n\t{{range .Entity.TableConstraints}}{{.}},{{end}}\n\tPRIMARY KEY (\"id\")\n);\n\n{{range .RelatedTables}}\nDROP TABLE IF EXISTS {{.Table}};\n\nCREATE TABLE {{.Table}} (\n\t\"{{.ThisID}}\" {{.ThisType}} NOT NULL,\n\t\"{{.ThatID}}\" {{.ThatType}} NOT NULL\n);\n\nDROP INDEX IF EXISTS {{.Table}}_{{.ThisID}};\nDROP INDEX IF EXISTS {{.Table}}_{{.ThatID}};\n\nCREATE INDEX {{.Table}}_{{.ThisID}} ON {{.Table}} ({{.ThisID}});\nCREATE INDEX {{.Table}}_{{.ThatID}} ON {{.Table}} ({{.ThatID}});\n{{end}}"),
	}
	file10 := &embedded.EmbeddedFile{
		Filename:    "util/credentials.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package credentials\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// Connection represents connection to a service having a protocol, identifier, password, host and port\ntype Connection struct {\n\tProtocol   string\n\tIdentifier string\n\tPassword   string\n\tHost       string\n\tPort       string\n}\n\nfunc (c *Connection) String() string {\n\treturn fmt.Sprintf(\"Protocol: %s Identifier: %s Password: %s Host: %s Port: %s\", c.Protocol, c.Identifier, c.Password, c.Host, c.Port)\n}\n\n// NewConnection returns a connection from string in the format protocol://username:password@host:port\nfunc NewConnection(conn string, defaults ...*Connection) *Connection {\n\tvar (\n\t\tconnection    *Connection\n\t\tcreds, server string\n\t)\n\n\tif len(defaults) == 0 {\n\t\tconnection = defaults[0]\n\t} else {\n\t\tconnection = new(Connection)\n\t}\n\n\tif i := strings.Index(conn, \"://\"); i != -1 {\n\t\tconnection.Port = conn[:i]\n\t\tconn = conn[i+3:]\n\t}\n\n\tif i := strings.Index(conn, \"@\"); i == -1 { //no username password\n\t\tserver = creds\n\t} else {\n\t\tcreds = conn[:i]\n\t\tserver = conn[i+1:]\n\t}\n\n\tif server == \"\" {\n\t\t//do nothing\n\t} else if i := strings.Index(server, \":\"); i != -1 { //both id and password\n\t\tconnection.Identifier = server[:i]\n\t\tconnection.Password = server[i+1:]\n\t} else { //only id\n\t\tconnection.Identifier = server\n\t}\n\n\tif creds == \"\" {\n\t\t//do nothing\n\t} else if i := strings.Index(creds, \":\"); i != -1 { //both host and port\n\t\tconnection.Host = creds[:i]\n\t\tconnection.Port = creds[i+1:]\n\t} else { //only host\n\t\tconnection.Host = creds\n\t}\n\n\treturn connection\n}\n"),
	}
	file11 := &embedded.EmbeddedFile{
		Filename:    "util/rice.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package util\n\nimport (\n\t\"net/http\"\n\t\"strings\"\n\n\trice \"github.com/GeertJohan/go.rice\"\n)\n\n// WebBox implements http.FileSystem which allows the use of Box with a http.FileServer.\n//   e.g.: http.Handle(\"/\", http.FileServer(rice.MustFindBox(\"http-files\").HTTPBox()))\ntype WebBox struct {\n\tBox  *rice.Box\n\tApp  string\n\tPath string\n}\n\n// NewWebBoxHandler returns a new WebBox File Server Handler\nfunc NewWebBoxHandler(box *rice.Box, app, path string) http.Handler {\n\treturn http.FileServer(WebBox{Box: box, App: app, Path: \"/\" + path})\n}\n\n// Open returns a File using the http.File interface\nfunc (b WebBox) Open(name string) (http.File, error) {\n\tname = strings.TrimPrefix(name, b.Path)\n\treturn b.Box.Open(b.App + name)\n}\n"),
	}
	file12 := &embedded.EmbeddedFile{
		Filename:    "util/util.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package util\n\nimport (\n\t\"context\"\n)\n\n// CheckContext returns an error if context is done\nfunc CheckContext(ctx context.Context) error {\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn ctx.Err()\n\tdefault:\n\t\treturn nil\n\t}\n}"),
	}
	file13 := &embedded.EmbeddedFile{
		Filename:    "util/web.go.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("package web\n\nimport (\n\t\"net/http\"\n\t\"os\"\n\t\"path\"\n\t\"strings\"\n)\n\nfunc lookupContent(root http.FileSystem, upath string) (http.File, os.FileInfo, bool) {\n\tvar (\n\t\terr  error\n\t\tfile http.File\n\t\tinfo os.FileInfo\n\t)\n\n\tif !strings.HasPrefix(upath, \"/\") {\n\t\tupath = \"/\" + upath\n\t}\n\n\tupath = path.Clean(upath)\n\n\tif file, err = root.Open(upath); err != nil {\n\t\treturn nil, nil, false\n\t}\n\n\tif info, err = file.Stat(); err != nil {\n\t\treturn nil, nil, false\n\t}\n\n\tif info.IsDir() {\n\t\tupath += \"/index.html\"\n\t\treturn lookupContent(root, upath+\"/index.html\")\n\t}\n\n\treturn file, info, false\n}\n\ntype fileHandlerWithFallback struct {\n\troot     http.FileSystem\n\tfallback http.File\n}\n\n// FileServerWithFallback returns an HTTP static fileserver with a default file fallback if requested url was not found\nfunc FileServerWithFallback(root http.FileSystem, fallback http.File) http.Handler {\n\treturn &fileHandlerWithFallback{root: root, fallback: fallback}\n}\n\nfunc (f *fileHandlerWithFallback) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tvar (\n\t\tfile http.File\n\t\tinfo os.FileInfo\n\t\tok   bool\n\t\terr  error\n\t)\n\n\tfile, info, ok = lookupContent(f.root, r.URL.Path)\n\n\tif !ok {\n\t\tfile = f.fallback\n\t\tif info, err = file.Stat(); err == nil {\n\t\t\tok = true\n\t\t}\n\t}\n\n\tif ok {\n\t\thttp.ServeContent(w, r, info.Name(), info.ModTime(), file)\n\t} else {\n\t\tw.Header().Set(\"Content-Type\", \"text/plain; charset=utf-8\")\n\t\tw.Header().Set(\"X-Content-Type-Options\", \"nosniff\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tw.Write([]byte(\"File not found and default could not be served.\"))\n\t}\n}\n\ntype fileHandlerWithNotFoundHandler struct {\n\troot    http.FileSystem\n\thandler http.Handler\n}\n\n// FileServerWithNotFoundHandler returns an HTTP static fileserver with a custom http.Handler if requested url was not found\nfunc FileServerWithNotFoundHandler(root http.FileSystem, handler http.Handler) http.Handler {\n\treturn &fileHandlerWithNotFoundHandler{root: root, handler: handler}\n}\n\nfunc (f *fileHandlerWithNotFoundHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tif file, info, ok := lookupContent(f.root, r.URL.Path); ok {\n\t\thttp.ServeContent(w, r, info.Name(), info.ModTime(), file)\n\t} else {\n\t\tf.handler.ServeHTTP(w, r)\n\t}\n}\n"),
	}
	file14 := &embedded.EmbeddedFile{
		Filename:    "vuetify_actions.js.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("import types from \"./types\";\n\nexport default {}"),
	}
	file15 := &embedded.EmbeddedFile{
		Filename:    "vuetify_edit.vue.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("<template>\n    <div class=\"container\">\n\t\t<v-toolbar color=\"transparent\" flat>\n            <v-toolbar-title class=\"grey--text text--darken-4 ml-0\"><h2>{{.Entity.Name}}</h2></v-toolbar-title>\n            <v-spacer></v-spacer>\n            <v-btn ml-0 small color=\"grey\" flat :to=\"{name: '{{.Endpoint}}List'}\">\n                <v-icon dark>arrow_back</v-icon> Back\n            </v-btn>\n        </v-toolbar>\n\t\t<v-alert :type=\"message.type\" :value=\"true\" v-for=\"(message, index) in messages\" :key=\"index\">\n\t\t{{ \"{{ message.text }}\" }}\n\t\t</v-alert>\n  \n        {{range .Entity.Fields -}}\n        {{widget_field \"vuetify\" .Widget.Type .}}\n        {{- end}}\n\n        <v-btn color=\"primary\" @click=\"save()\">Save</v-btn>\n        <v-btn color=\"gray\" :to=\"{name: '{{.Endpoint}}List'}\">Cancel</v-btn>\n\t</div>\n</template>\n  \n<script>\nimport axios from \"axios\"\n\nexport default {\n    props: [\"id\"],\n    created() {\n        if (!this.id) {\n            return\n        }\n\n        axios.get(\"/api/{{.Endpoint}}/\" + this.id).then(response => {\n            this.id = response.data.entity.id\n            {{range .Entity.Fields}}{{if ne .Serialized \"id\"}}\n            this.entity.{{.Serialized}} = response.data.entity.{{.Serialized}}\n            {{if eq .Widget.Type \"date\"}}this.dates.{{.Serialized}}.value = response.data.entity.{{.Serialized}}.substr(0,10){{end}}\n            {{end}}{{end}}\n        })\n    },\n    data() {\n        return {\n            select: {\n                {{range $i, $v := .Entity.Fields}}{{if eq .Widget.Type \"date\"}}\n                {{.Serialized}}: {\n                    items:[\n                        {{range $j, $u := .Widget.Options}}\n                        {text: \"{{.Label}}\", value: \"{{.Value}}\"}{{if eq (plus1 $j) (len $u)}},{{end}}\n                        {{end}}\n                    ]\n                }{{if ne (plus1 $i) (len $.Entity.Fields)}},{{end}}\n                {{end}}{{end}}\n\t\t\t},\n\t\t\tdates: {\n                {{range $i, $v := .Entity.Fields}}{{if eq .Widget.Type \"date\"}}\n\t\t\t\t{{.Serialized}}: {value: null, menuAppear: false}{{if ne (plus1 $i) (len $.Entity.Fields)}},{{end}}\n                {{end}}{{end}}\n\t\t\t},\n            messages: [],\n            entity: {\n                {{range $i, $e := .Entity.Fields}}{{if ne .Serialized \"id\"}}\n                {{.Serialized}} : null{{if ne (plus1 $i) (len $.Entity.Fields)}},{{end}}\n                {{end}}{{end}}\n            }\n        }\n    },\n    watch: {\n        {{range $i, $e := .Entity.Fields}}\n        \"select.{{.Serialized}}.search\": function(val) {\n            val && this.querySelections(\"{{.Serialized}}\", \"{{$.Endpoint}}\", \"{{$.Prefix}}{{.Relationship.Target.Endpoint}}\", val)\n        }{{if ne (plus1 $i) (len $.Entity.Fields)}},{{end}}\n        {{end}}\n    },\n    methods: {\n        querySelections(fieldname, endpoint, filter, val) {\n            this.select[fieldname].loading = true\n            axios.get(\"/api/\" + endpoint + \"?\" + filter + \"-lk=\" + encodeURIComponent(val)).then(response => {\n                this.select[fieldname].loading = false\n                this.select[fieldname].items = response.data.entities.map(function(e) {\n                    return { text: e[filter], value: e.id }\n                })\n            })\n        },\n        save() {\n            if (this.id) {\n                axios.put(\"/api/{{.Endpoint}}/\" + this.id, this.entity).then(this.saved)\n            } else {\n                axios.post(\"/api/{{.Endpoint}}\", this.entity).then(this.saved)\n            }\n\t\t},\n\t\tsaved(response) {\n\t\t\tthis.id = response.data.entity.id\n\t\t\t{{range .Entity.Fields}}{{if ne .Serialized \"id\"}}\n            this.entity.{{.Serialized}} = response.data.entity.{{.Serialized}}\n            {{end}}{{end}}\n\n\t\t\tthis.messages.push({\n\t\t\t\ttype: \"success\",\n\t\t\t\ttext: \"{{.Entity.Name}} saved successfully\"\n\t\t\t})\n\t\t}\n    }\n}\n</script>"),
	}
	file16 := &embedded.EmbeddedFile{
		Filename:    "vuetify_editor-field-checkbox.vue.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("<v-checkbox label=\"{{.Label}}\" v-model=\"entity.{{.Serialized}}\"></v-checkbox>"),
	}
	file17 := &embedded.EmbeddedFile{
		Filename:    "vuetify_editor-field-date.vue.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("<v-menu\n\tref=\"menu_{{.Serialized}}\"\n\tlazy\n\t:close-on-content-click=\"false\"\n\tv-model=\"dates.{{.Serialized}}.menuAppear\"\n\ttransition=\"scale-transition\"\n\toffset-y\n\tfull-width\n\t:nudge-right=\"40\"\n\tmin-width=\"290px\"\n\t:return-value.sync=\"dates.{{.Serialized}}.value\"\n\t>\n\t<v-text-field\n\t\tslot=\"activator\"\n\t\tlabel=\"{{.Label}}\"\n\t\tv-model=\"dates.{{.Serialized}}.value\"\n\t\tprepend-icon=\"event\"\n\t\treadonly\n\t\t></v-text-field>\n\t\t<v-date-picker v-model=\"dates.{{.Serialized}}.value\" @change=\"entity.{{.Serialized}} = dates.{{.Serialized}}.value + 'T00:00:00Z'\" no-title scrollable>\n\t\t<v-spacer></v-spacer>\n\t\t<v-btn flat color=\"primary\" @click=\"menu_{{.Serialized}} = false\">Cancel</v-btn>\n\t\t<v-btn flat color=\"primary\" @click=\"$refs.menu_{{.Serialized}}.save(dates.{{.Serialized}}.value)\">OK</v-btn>\n\t\t</v-date-picker>\n</v-menu>"),
	}
	file18 := &embedded.EmbeddedFile{
		Filename:    "vuetify_editor-field-number.vue.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("<v-text-field v-model=\"entity.{{.Serialized}}\" label=\"{{.Label}}\" type=\"number\" />"),
	}
	file19 := &embedded.EmbeddedFile{
		Filename:    "vuetify_editor-field-password.vue.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("<v-text-field\n\tv-model=\"entity.{{.Serialized}}\"\n\t:append-icon=\"e1 ? 'visibility' : 'visibility_off'\"\n\t:append-icon-cb=\"() => (e1 = !e1)\"\n\t:type=\"e1 ? 'password' : 'text'\"\n\tcounter\n  ></v-text-field>"),
	}
	file1a := &embedded.EmbeddedFile{
		Filename:    "vuetify_editor-field-select-rel.vue.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("<v-select\n    autocomplete\n    cache-items\n    required\n    label=\"{{.Label}}\"\n    :loading=\"select.{{.Serialized}}.isloading\"\n    :items=\"select.{{.Serialized}}.items\"\n\t:search-input.sync=\"select.{{.Serialized}}.search\"\n\tv-model=\"entity.{{.Serialized}}\"\n\t{{if .Widget.Multiple}}multiple chips{{end}}\n></v-select>"),
	}
	file1b := &embedded.EmbeddedFile{
		Filename:    "vuetify_editor-field-select.vue.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("<v-select\n\tautocomplete\n\tcache-items\n\trequired\n\tlabel=\"{{.Label}}\"\n\t:items=\"select.{{.Serialized}}.items\"\n\tv-model=\"entity.{{.Serialized}}\"\n\t{{if .Widget.Multiple}}multiple chips{{end}}\n></v-select>"),
	}
	file1c := &embedded.EmbeddedFile{
		Filename:    "vuetify_editor-field-textarea.vue.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("<v-text-field v-model=\"entity.{{.Serialized}}\" label=\"{{.Label}}\" multiline />"),
	}
	file1d := &embedded.EmbeddedFile{
		Filename:    "vuetify_editor-field-textfield.vue.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("<v-text-field v-model=\"entity.{{.Serialized}}\" label=\"{{.Label}}\" />"),
	}
	file1e := &embedded.EmbeddedFile{
		Filename:    "vuetify_editor-field-time.vue.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("<div>\n\t<v-time-picker v-model=\"entity.{{.Serialized}}\" label=\"{{.Label}}\" :landscape=\"landscape\"></v-time-picker>\n</div>"),
	}
	file1f := &embedded.EmbeddedFile{
		Filename:    "vuetify_editor-field-toggle.vue.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("<v-switch\n\tlabel=\"{{.Label}}\"\n\tv-model=\"entity.{{.Serialized}}\"\n></v-switch>"),
	}
	file1g := &embedded.EmbeddedFile{
		Filename:    "vuetify_getters.js.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("export default {}\n"),
	}
	file1h := &embedded.EmbeddedFile{
		Filename:    "vuetify_index.js.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("import actions from \"./actions\";\nimport getters from \"./getters\";\nimport mutations from \"./mutations\";\nimport routes from \"./routes\";\n\nconst namespaced = true;\n\nconst state = {\n  entities: routes.routes\n};\n\nexport default {\n  namespaced,\n  state,\n  actions,\n  getters,\n  mutations\n};"),
	}
	file1i := &embedded.EmbeddedFile{
		Filename:    "vuetify_list.vue.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("<template>\n    <v-container>\n        <v-toolbar color=\"transparent\" flat>\n            <v-toolbar-title class=\"grey--text text--darken-4 ml-0\"><h2>{{.Entity.Name}}</h2></v-toolbar-title>\n            <v-spacer></v-spacer>\n            <v-btn mr-0 color=\"primary\" :to=\"{name: '{{.Endpoint}}Edit', params:{id: 0}}\">\n                <v-icon dark>add</v-icon> Add\n            </v-btn>\n        </v-toolbar>\n        \n        <v-alert :type=\"message.type === 'E' ? 'error' : message.type\" :value=\"true\" v-for=\"(message, index) in messages\" :key=\"index\">\n            {{ \"{{ message.text }}\" }}\n        </v-alert>\n\n        <v-alert type=\"info\" value=\"true\"  color=\"primary\" outline icon=\"info\" v-if=\"entities.length === 0\">\n            No {{.Entity.Name}} exist. Would you like to create one now?\n            <v-btn :to=\"{name: '{{.Endpoint}}Edit', params:{id: 0}}\" color=\"primary\">create new</v-btn>\n        </v-alert>\n        <template v-else>\n            <v-text-field mb-4 append-icon=\"search\" label=\"Search\" single-line hide-details v-model=\"search\"></v-text-field>            \n            <v-data-table :headers=\"headers\" :items=\"entities\" class=\"elevation-1\" :search=\"search\">\n                <template slot=\"items\" slot-scope=\"props\">\n\t\t\t\t\t{{ range .Entity.Fields }}\n\t\t\t\t\t<td>{{ printf \"{{ props.item.%s}}\" .Serialized }}</td>\n\t\t\t\t\t{{end}}\n                    <td class=\"justify-center layout px-0\">\n                        <v-btn icon class=\"mx-0\" :to=\"{name: '{{.Endpoint}}Edit', params: {'id': props.item.id}  }\">\n                            <v-icon color=\"teal\">edit</v-icon>\n                        </v-btn>\n                    </td>\n                </template>\n\n                <template slot=\"no-data\">\n                    <v-flex ma-4>\n                        <v-alert slot=\"no-results\" :value=\"true\" color=\"primary\" outline icon=\"info\" v-if=\"search.length > 0\">\n                        Your search for \"{{ \"{{ search }}\" }}\" found no results.\n                        </v-alert>\n                        <v-alert slot=\"no-results\" :value=\"true\" color=\"primary\" outline icon=\"info\" v-else>\n                            No {{.Entity.Name}} found.\n                        </v-alert>\n                    </v-flex>\n                </template>\n            </v-data-table>\n        </template>\n    </v-container>\n</template>\n\n<script>\nimport axios from \"axios\"\nexport default {\n  data() {\n    return {\n      messages: [],\n      search: \"\",\n      headers: [\n\t\t{{range .Entity.Fields }}\n\t\t{text: \"{{.Label}}\", value: \"{{.Serialized}}\"},\n\t\t{{end}}\n        {'text': 'Action', 'value': null}\n      ],\n      entities: []\n    };\n  },\n  created() {\n    axios\n      .get(\"/api/{{.Endpoint}}\")\n      .then(response => {\n        this.entities = response.data.entities;\n      })\n      .catch(error => {\n        this.messages = [...this.messages, ...error.response.data.messages];\n      });\n  }\n};\n</script>"),
	}
	file1j := &embedded.EmbeddedFile{
		Filename:    "vuetify_mutations.js.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("import types from \"./types\";\n\nexport default {}\n"),
	}
	file1k := &embedded.EmbeddedFile{
		Filename:    "vuetify_routes.js.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("{{range .Entities}}\n// {{.Name}} {{.Description}}\nimport {{.Name}}Edit from \"../views/{{plural .Name}}Edit.vue\";\nimport {{.Name}}List from \"../views/{{plural .Name}}List.vue\";\n{{end}}\n\nlet routes = [\n  {{range $i, $v := .Entities}}\n  {\n    path: \"/{{lower (plural .Name)}}/:id\",\n    name: \"{{lower (plural .Name)}}Edit\",\n    props: true,\n    icon: \"dashboard\",\n    component: {{.Name}}Edit,\n    entity: \"{{plural .Name}}\"\n  },\n  {\n    path: \"/{{lower (plural .Name)}}list/\",\n    name: \"{{lower (plural .Name)}}List\",\n    icon: \"dashboard\",\n    component: {{.Name}}List,\n    entity: \"{{plural .Name}}\"\n  }{{if ne (plus1 $i) (len $.Entities)}},{{end}}\n  {{end}}\n];\n\nlet entities = [\n  {{range $i, $v := .Entities}}\n  \"{{plural .Name}}\"{{if ne (plus1 $i) (len $.Entities)}},{{end}}\n  {{end}}\n];\n\nfunction registerRoutes(router) {\n  router.addRoutes(routes);\n}\n\nexport default {\n  routes,\n  entities,\n  registerRoutes\n}\n"),
	}
	file1l := &embedded.EmbeddedFile{
		Filename:    "vuetify_types.js.tmpl",
		FileModTime: time.Unix(1532601567, 0),
		Content:     string("export default {}\n"),
	}

	// define dirs
	dir1 := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1532601567, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file6,  // "bootstrap.go.tmpl"
			file7,  // "bootstrap_env.tmpl"
			filev,  // "http.go.tmpl"
			filew,  // "rest.go.tmpl"
			filex,  // "rest_hooks.go.tmpl"
			filey,  // "schema.sql.tmpl"
			file14, // "vuetify_actions.js.tmpl"
			file15, // "vuetify_edit.vue.tmpl"
			file16, // "vuetify_editor-field-checkbox.vue.tmpl"
			file17, // "vuetify_editor-field-date.vue.tmpl"
			file18, // "vuetify_editor-field-number.vue.tmpl"
			file19, // "vuetify_editor-field-password.vue.tmpl"
			file1a, // "vuetify_editor-field-select-rel.vue.tmpl"
			file1b, // "vuetify_editor-field-select.vue.tmpl"
			file1c, // "vuetify_editor-field-textarea.vue.tmpl"
			file1d, // "vuetify_editor-field-textfield.vue.tmpl"
			file1e, // "vuetify_editor-field-time.vue.tmpl"
			file1f, // "vuetify_editor-field-toggle.vue.tmpl"
			file1g, // "vuetify_getters.js.tmpl"
			file1h, // "vuetify_index.js.tmpl"
			file1i, // "vuetify_list.vue.tmpl"
			file1j, // "vuetify_mutations.js.tmpl"
			file1k, // "vuetify_routes.js.tmpl"
			file1l, // "vuetify_types.js.tmpl"

		},
	}
	dir2 := &embedded.EmbeddedDir{
		Filename:   "application",
		DirModTime: time.Unix(1532601567, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file3, // "application/gen-service.sh.tmpl"
			file4, // "application/main.go.tmpl"
			file5, // "application/makefile.tmpl"

		},
	}
	dir8 := &embedded.EmbeddedDir{
		Filename:   "bread",
		DirModTime: time.Unix(1532601567, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file9, // "bread/service_bread.go.tmpl"
			filea, // "bread/service_bread.proto.tmpl"
			fileb, // "bread/service_bread_hooks.go.tmpl"

		},
	}
	dirc := &embedded.EmbeddedDir{
		Filename:   "crud",
		DirModTime: time.Unix(1532601567, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			filed, // "crud/crud.go.tmpl"
			filee, // "crud/hooks.go.tmpl"
			filef, // "crud/models.go.tmpl"
			fileg, // "crud/moderrors.go.tmpl"
			fileu, // "crud/protobuf.proto.tmpl"

		},
	}
	dirh := &embedded.EmbeddedDir{
		Filename:   "crud/partials",
		DirModTime: time.Unix(1532601567, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			filei, // "crud/partials/delete_many.go.tmpl"
			filej, // "crud/partials/delete_single.go.tmpl"
			filek, // "crud/partials/get.go.tmpl"
			filel, // "crud/partials/insert.go.tmpl"
			filem, // "crud/partials/list.go.tmpl"
			filen, // "crud/partials/loadrelated_manymany.go.tmpl"
			fileo, // "crud/partials/loadrelated_manyone.go.tmpl"
			filep, // "crud/partials/loadrelated_onemany.go.tmpl"
			fileq, // "crud/partials/merge.go.tmpl"
			filer, // "crud/partials/save.go.tmpl"
			files, // "crud/partials/saverelated.go.tmpl"
			filet, // "crud/partials/update.go.tmpl"

		},
	}
	dirz := &embedded.EmbeddedDir{
		Filename:   "util",
		DirModTime: time.Unix(1532601567, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file10, // "util/credentials.go.tmpl"
			file11, // "util/rice.go.tmpl"
			file12, // "util/util.go.tmpl"
			file13, // "util/web.go.tmpl"

		},
	}

	// link ChildDirs
	dir1.ChildDirs = []*embedded.EmbeddedDir{
		dir2, // "application"
		dir8, // "bread"
		dirc, // "crud"
		dirz, // "util"

	}
	dir2.ChildDirs = []*embedded.EmbeddedDir{}
	dir8.ChildDirs = []*embedded.EmbeddedDir{}
	dirc.ChildDirs = []*embedded.EmbeddedDir{
		dirh, // "crud/partials"

	}
	dirh.ChildDirs = []*embedded.EmbeddedDir{}
	dirz.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`templates`, &embedded.EmbeddedBox{
		Name: `templates`,
		Time: time.Unix(1532601567, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"":              dir1,
			"application":   dir2,
			"bread":         dir8,
			"crud":          dirc,
			"crud/partials": dirh,
			"util":          dirz,
		},
		Files: map[string]*embedded.EmbeddedFile{
			"application/gen-service.sh.tmpl":            file3,
			"application/main.go.tmpl":                   file4,
			"application/makefile.tmpl":                  file5,
			"bootstrap.go.tmpl":                          file6,
			"bootstrap_env.tmpl":                         file7,
			"bread/service_bread.go.tmpl":                file9,
			"bread/service_bread.proto.tmpl":             filea,
			"bread/service_bread_hooks.go.tmpl":          fileb,
			"crud/crud.go.tmpl":                          filed,
			"crud/hooks.go.tmpl":                         filee,
			"crud/models.go.tmpl":                        filef,
			"crud/moderrors.go.tmpl":                     fileg,
			"crud/partials/delete_many.go.tmpl":          filei,
			"crud/partials/delete_single.go.tmpl":        filej,
			"crud/partials/get.go.tmpl":                  filek,
			"crud/partials/insert.go.tmpl":               filel,
			"crud/partials/list.go.tmpl":                 filem,
			"crud/partials/loadrelated_manymany.go.tmpl": filen,
			"crud/partials/loadrelated_manyone.go.tmpl":  fileo,
			"crud/partials/loadrelated_onemany.go.tmpl":  filep,
			"crud/partials/merge.go.tmpl":                fileq,
			"crud/partials/save.go.tmpl":                 filer,
			"crud/partials/saverelated.go.tmpl":          files,
			"crud/partials/update.go.tmpl":               filet,
			"crud/protobuf.proto.tmpl":                   fileu,
			"http.go.tmpl":                               filev,
			"rest.go.tmpl":                               filew,
			"rest_hooks.go.tmpl":                         filex,
			"schema.sql.tmpl":                            filey,
			"util/credentials.go.tmpl":                   file10,
			"util/rice.go.tmpl":                          file11,
			"util/util.go.tmpl":                          file12,
			"util/web.go.tmpl":                           file13,
			"vuetify_actions.js.tmpl":                    file14,
			"vuetify_edit.vue.tmpl":                      file15,
			"vuetify_editor-field-checkbox.vue.tmpl":     file16,
			"vuetify_editor-field-date.vue.tmpl":         file17,
			"vuetify_editor-field-number.vue.tmpl":       file18,
			"vuetify_editor-field-password.vue.tmpl":     file19,
			"vuetify_editor-field-select-rel.vue.tmpl":   file1a,
			"vuetify_editor-field-select.vue.tmpl":       file1b,
			"vuetify_editor-field-textarea.vue.tmpl":     file1c,
			"vuetify_editor-field-textfield.vue.tmpl":    file1d,
			"vuetify_editor-field-time.vue.tmpl":         file1e,
			"vuetify_editor-field-toggle.vue.tmpl":       file1f,
			"vuetify_getters.js.tmpl":                    file1g,
			"vuetify_index.js.tmpl":                      file1h,
			"vuetify_list.vue.tmpl":                      file1i,
			"vuetify_mutations.js.tmpl":                  file1j,
			"vuetify_routes.js.tmpl":                     file1k,
			"vuetify_types.js.tmpl":                      file1l,
		},
	})
}
