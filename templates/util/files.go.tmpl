package files

import (
	"fmt"
	"image"
	"image/gif"
	"image/jpeg"
	"image/png"
	"io/ioutil"
	"log"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"

	"gopkg.in/h2non/filetype.v1"
)

// Constants for files package
const (
	NoLimit = -1
)

var (
	baseUploadPath = "public/"

	// DefaultUploadOptions holds default upload options
	DefaultUploadOptions = &UploadOptions{
		Permissions: 0644,
		FileExt:     "jpg",
		MaxSize:     NoLimit,
		MinSize:     NoLimit,
		ImgDimensions: &ImageDimensions{
			MinHeight: NoLimit,
			MaxHeight: NoLimit,
			MinWidth:  NoLimit,
			MaxWidth:  NoLimit,
		},
	}
)

// ImageDimensions holds dimensions options
type ImageDimensions struct {
	MinHeight int
	MaxHeight int
	MinWidth  int
	MaxWidth  int
}

// UploadOptions holds file upload options
type UploadOptions struct {
	Destination   string
	Permissions   os.FileMode
	Field         string
	FileExt       string
	MaxSize       int
	MinSize       int
	ImgDimensions *ImageDimensions
}

func init() {
	image.RegisterFormat("jpeg", "jpeg", jpeg.Decode, jpeg.DecodeConfig)
	image.RegisterFormat("png", "png", png.Decode, png.DecodeConfig)
	image.RegisterFormat("gif", "gif", gif.Decode, gif.DecodeConfig)
}

// SetBaseUploadPath sets the base upload path for files upload
func SetBaseUploadPath(bUploadPath string) {
	if bUploadPath == "" {
		return
	}
	baseUploadPath = bUploadPath
}

// Upload validates and saves create file
func Upload(fileName string, fileContent []byte, options *UploadOptions) (string, error) {
	var filePath string

	if options.Permissions == 0 {
		options.Permissions = DefaultUploadOptions.Permissions
	}

	directoryPath := path.Join(baseUploadPath, options.Destination)

	if err := os.MkdirAll(directoryPath, os.ModePerm); err != nil {
		log.Printf("error creating directories: %v\n", err)
		return filePath, err
	}

	filePath = filepath.Join(directoryPath, buildFileName(fileName, options.FileExt))

	if _, err := os.Stat(filePath); os.IsNotExist(err) {
		if err := ioutil.WriteFile(filePath, fileContent, options.Permissions); err != nil {
			log.Printf("error writing %v: %v\n", filePath, err)
			return filePath, err
		}
	}

	file, err := os.Open(filePath)
	if err != nil {
		log.Printf("error opening %v: %v\n", filePath, err)
		return filePath, err
	}
	defer file.Close()

	buf, err := ioutil.ReadFile(filePath)
	if err != nil {
		log.Printf("error reading %v: %v\n", filePath, err)
		return filePath, err
	}

	fileSize := len(buf)

	if options.FileExt == "" {
		options.FileExt = DefaultUploadOptions.FileExt
	}

	if !filetype.IsExtension(buf, options.FileExt) {
		log.Printf("file not a valid %v file\n", options.FileExt)
		return filePath, fmt.Errorf("file type invalid")
	}

	if options.MaxSize != NoLimit && fileSize > options.MaxSize {
		log.Printf("file %v greater than max file size: %v\n", fileName, options.MaxSize)
		return filePath, fmt.Errorf("file max size error")
	}

	if options.MinSize != NoLimit && fileSize < options.MinSize {
		log.Printf("file %v lower than min file size: %v\n", fileName, options.MinSize)
		return filePath, fmt.Errorf("file min size error")
	}

	if filetype.IsImage(buf) {
		image, _, err := image.DecodeConfig(file)
		if err != nil {
			log.Printf("error decoding image: %v", err)
			return filePath, err
		}

		if options.ImgDimensions == nil {
			options.ImgDimensions = DefaultUploadOptions.ImgDimensions
		}

		if options.ImgDimensions.MaxHeight != NoLimit && image.Height > options.ImgDimensions.MaxHeight {
			log.Printf("image %v greater than max height: %v\n", fileName, options.ImgDimensions.MaxHeight)
			return filePath, fmt.Errorf("image max height error")
		}

		if options.ImgDimensions.MinHeight != NoLimit && image.Height < options.ImgDimensions.MinHeight {
			log.Printf("image %v lower than min height: %v\n", fileName, options.ImgDimensions.MinHeight)
			return filePath, fmt.Errorf("image min height error")
		}

		if options.ImgDimensions.MaxWidth != NoLimit && image.Width > options.ImgDimensions.MaxWidth {
			log.Printf("image %v greater than max width: %v\n", fileName, options.ImgDimensions.MaxWidth)
			return filePath, fmt.Errorf("image max width error")
		}

		if options.ImgDimensions.MinWidth != NoLimit && image.Width < options.ImgDimensions.MinWidth {
			log.Printf("image %v lower than min width: %v\n", fileName, options.ImgDimensions.MinWidth)
			return filePath, fmt.Errorf("image min width error")
		}
	}

	return filePath, nil
}

// Delete deletes one file
func Delete(filepath string) error {
	if err := os.Remove(filepath); err != nil {
		return err
	}
	return nil
}

// DeleteMany deletes many files
func DeleteMany(filespath ...string) {
	for _, filepath := range filespath {
		if err := Delete(filepath); err != nil {
			log.Printf("error deleting file %v\n", err)
		}
	}
}

// RemoveContents deletes all contents of a directory
func RemoveContents(dir, exception string) error {
	dir = path.Join(baseUploadPath, dir)
	dirRead, err := os.Open(dir)
	if err != nil {
		return err
	}

	dirFiles, err := dirRead.Readdir(0)
	if err != nil {
		return err
	}

	for _, fileInfo := range dirFiles {
		fullPath := path.Join(dir, fileInfo.Name())

		if fullPath == exception {
			continue
		}

		os.Remove(fullPath)
	}
	return nil
}

func buildFileName(oldFilename, newExt string) string {
	oldExt := filepath.Ext(oldFilename)
	newFilename := strings.TrimSuffix(oldFilename, oldExt)
	newFilename = newFilename + "_" + time.Now().Format("20060102150405")
	return newFilename + "." + newExt
}
