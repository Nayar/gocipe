package credentials

import (
	"fmt"
	"strings"
)

// Connection represents connection to a service having a protocol, identifier, password, host and port
type Connection struct {
	Protocol   string
	Identifier string
	Password   string
	Host       string
	Port       string
}

func (c *Connection) String() string {
	return fmt.Sprintf("Protocol: %s Identifier: %s Password: %s Host: %s Port: %s", c.Protocol, c.Identifier, c.Password, c.Host, c.Port)
}

// NewConnection returns a connection from string in the format protocol://username:password@host:port
func NewConnection(conn string, defaults ...*Connection) *Connection {
	var (
		connection    *Connection
		creds, server string
	)

	if len(defaults) == 0 {
		connection = defaults[0]
	} else {
		connection = new(Connection)
	}

	if i := strings.Index(conn, "://"); i != -1 {
		connection.Port = conn[:i]
		conn = conn[i+3:]
	}

	if i := strings.Index(conn, "@"); i == -1 { //no username password
		server = creds
	} else {
		creds = conn[:i]
		server = conn[i+1:]
	}

	if server == "" {
		//do nothing
	} else if i := strings.Index(server, ":"); i != -1 { //both id and password
		connection.Identifier = server[:i]
		connection.Password = server[i+1:]
	} else { //only id
		connection.Identifier = server
	}

	if creds == "" {
		//do nothing
	} else if i := strings.Index(creds, ":"); i != -1 { //both host and port
		connection.Host = creds[:i]
		connection.Port = creds[i+1:]
	} else { //only host
		connection.Host = creds
	}

	return connection
}
