<template>
    <div class="listing--container">
        <v-toolbar color="transparent" class="listing-toolbar" flat ml-0>
            <v-btn icon>
                <v-icon large>{{.Entity.Vuetify.Icon}}</v-icon>
            </v-btn>
            <v-toolbar-title class="ma-0 pa-0">
                <h2>{{.Entity.Name}}</h2>
            </v-toolbar-title>
            <v-spacer></v-spacer>
            <v-btn mr-0 color="primary" :to="{path: '{{plural (lower .Entity.Name) }}/edit'}">
                <v-icon dark>add</v-icon> Add
            </v-btn>
        </v-toolbar>

        <!-- Error Messages -->
        <v-alert :type="message.type==='E' ? 'error' : message.type" :value="true" v-for="(message, index) in messages" :key="index">
            {{ "{{ message.text }}" }}
        </v-alert>

        <!-- Empty Check -->
        <div v-if="loading" centered>
            <v-progress-linear :indeterminate="true"></v-progress-linear>
            <p class="text-xs-center">contacting server...</p>
        </div>
        <v-alert type="info" value="true" color="primary" outline icon="info" v-else-if="entities.length===0 && !loading">
            No {{.Entity.Name}} exist. Would you like to create one now?
            <v-btn color="primary" :to="{path: '{{plural (lower .Entity.Name) }}/edit'}">create new</v-btn>
        </v-alert>

        <!-- Table form listing -->
        <template v-else>
            <v-text-field mb-4 append-icon="search" label="Search" single-line hide-details v-model="search"></v-text-field>
            <v-data-table :headers="headers" :items="entities" class="elevation-1" :search="search">
                <template slot="items" slot-scope="props">
                    <td class="justify-center layout px-0">
                        <v-btn icon class="mx-0" :to="{name: '{{plural (lower .Entity.Name )}}_edit', params:{ id: props.item.getId() }}">
                            <v-icon>edit</v-icon>
                        </v-btn>
                        <v-tooltip top>
                            <v-btn slot="activator" icon class="mx-0" :to="{name: 'g_{{plural (lower .Entity.Name )}}_edit', params:{ id: props.item.getId() }}">
                                <v-icon>accessible_forward</v-icon>
                            </v-btn>
                            <span>Automatically generated Edit Form</span>
                        </v-tooltip>
                    </td>
                    <!-- Check if it should appear in the list -->
                    {{ range .Entity.Fields }} {{if not .ListWidget.Hide}}
                    <!-- Use different rendering for dates -->
                    {{ if eq .Property.Type "time" }}
                    <td>
                        <timeago :datetime="{{printf " props.item.get%s().toDate() " (ucfirst .Property.Name) }}"></timeago>
                    </td>
                    {{- else -}}
                    <!-- Use different rendering for dates -->
                    {{if eq .ListWidget.Type "image"}}
                    <td>
                        <img :src="{{ printf " props.item.get%s() " (ucfirst .Property.Name) }} " />
                    </td>
                    {{else}}
                    <td>
                        <v-tooltip top>
                            <span slot="activator">
                                {{ printf "{{ props.item.get%s()}}" (ucfirst .Property.Name) }}
                            </span>
                            <span>Property Type : {{ ucfirst .Property.Type}}</span>
                        </v-tooltip>
                    </td>
                    {{end}} {{end}} {{end}} {{end}}
                </template>

                <template slot="no-data">
                    <v-flex ma-4>
                        <v-alert slot="no-results" :value="true" color="primary" outline icon="info" v-if="search.length> 0"> Your search for "{{ "{{ search }}" }}" found no results.
                        </v-alert>
                        <v-alert slot="no-results" :value="true" color="primary" outline icon="info" v-else>
                            No {{.Entity.Name}} found.
                        </v-alert>
                    </v-flex>
                </template>
            </v-data-table>
        </template>
    </div>
</template>

<script>
import { BreadClient } from "@/services/service_bread_pb_service";
import { List{{plural .Entity.Name}}Request } from "@/services/service_bread_pb";

export default {
  data() {
    return {
      messages: [],
      search: "",
      headers: [
        {'text': 'Action', 'value': null, sortable: false, 'width': '80px'},
		{{range .Entity.Fields }}{{if not .ListWidget.Hide}}
		{text: "{{.Label}}", value: "{{.Property.Name}}"},
		{{end}}{{end}}
      ],
      entities: [],
      loading: false
    };
  },
  created() {
    let cli = new BreadClient("/api");
    let req = new List{{plural .Entity.Name}}Request();
    this.loading = true;

    cli.list{{plural .Entity.Name}}(req, (err, resp) => {
        if (err) {
            console.log(err);
            return;
        }
        this.loading = false;
        this.entities = resp.get{{ucfirst (plural .Entity.Name)}}List();
    });
  },
  methods: {
      create: function() {
          let cli = new BreadClient("/api");
          let req = new Create{{.Entity.Name}}Request();
          this.loading = true;

           cli.create{{.Entity.Name}}(req, (err, resp) => {
            if (err) {
                console.log(err);
                this.loading = false;
                return;
            }

            this.$router.go({
                name: "{{plural .Entity.Name}}_edit",
                params: { id: resp.get{{.Entity.Name}}().getId() } 
            });
        });
      }
  }
};
</script>

<style lang="scss">
.listing-toolbar .v-toolbar__content {
  padding: 0;
}

.listing--container td {
  img {
    display: block !important;
    height: 48px;
    width: auto;
  }
}
</style>


<style lang="scss" scoped>
.bounce-enter-active {
  animation: bounce-in 0.5s;
}
.bounce-leave-active {
  animation: bounce-in 0.5s reverse;
}
@keyframes bounce-in {
  0% {
    transform: scale(0);
  }
  50% {
    transform: scale(1.5);
  }
  100% {
    transform: scale(1);
  }
}
</style>
