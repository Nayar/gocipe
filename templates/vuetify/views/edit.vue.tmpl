<template>
    <div>
        <div class="listing--container">
            <v-toolbar color="transparent" class="listing-toolbar" flat ml-0>
                <v-btn icon :to="{name: '{{- plural (lower .Entity.Name) -}}_list'}">
                    <v-icon large>arrow_back</v-icon>
                </v-btn>
                <v-toolbar-title class="ma-0 pa-0">
                    <h2>Edit {{.Entity.Name}}</h2>
                </v-toolbar-title>
                <v-spacer></v-spacer>
                <v-btn mr-0 color="primary" :to="''">
                    <v-icon dark>save</v-icon> Save
                </v-btn>
            </v-toolbar>
        </div>
        <v-card>
            <v-card-text>
                <v-form>
                    <div class="gocipe-form-grid" v-if="entity">
                        {{ range .Entity.Fields }} {{if not .EditWidget.Hide }}
                        <template>
                            <div class="gocipe-field-container">
                                <component :is="'g{{ucfirst .EditWidget.Type }}'" :label="'{{ .Label }}'" :hint="'widget: {{ .EditWidget.Type }}'" @gocipe="(e) => this.entity.set{{ucfirst .Property.Name}}(e)" :value="this.entity.get{{ucfirst .Property.Name}}()"></component>
                            </div>
                        </template>
                        {{end}} {{end}}
                    </div>
                </v-form>
            </v-card-text>
            <v-card-actions>
                <v-btn color="primary" @click="update">
                    Save
                    <v-icon right>save</v-icon>
                </v-btn>
            </v-card-actions>
        </v-card>

        <v-snackbar v-model="snackbar.show" :right="true" :vertical="true" :bottom="true" color="primary" :timeout="6000">
            {{ printf `{{ snackbar.text }}` }}
            <v-btn dark flat @click="snackbarHide">
                Close
            </v-btn>
        </v-snackbar>
    </div>
</template>


<script>
import { BreadClient } from "@/services/service_bread_pb_service";
import { Get{{ .Entity.Name}}Request } from "@/services/service_bread_pb";
import { Update{{ .Entity.Name}}Request } from "@/services/service_bread_pb";
import gTextfield from "@/widgets/gTextfield.vue";
import gImagefield from "@/widgets/gImagefield.vue";
import gCheckbox from "@/widgets/gCheckbox.vue";
import gIcon from "@/widgets/gIcon.vue";

export default {
  data() {
    return {
      messages: [],   
      snackbar: {
          show: false, 
          text: ''
      },
      entity: null,
      loading: false,
      id: null
    };
  },
  {{/*
    The Code below tranforms into something like this. A computed property with custom getter and setters
    computed: {
        name: {
        get: function() {
            return this.entity.getName();
        },
        set: function(value) {
            this.entity.setName(value);
        }
        }
    },
  */}}

  components: {
      gTextfield,
      gImagefield,
      gCheckbox,
      gIcon
  },
  mounted() {
    this.id = this.$route.params.id;
    let cli = new BreadClient("/api");
    let req = new Get{{ .Entity.Name}}Request();
    req.setId(this.id);

    this.loading = true;

    cli.get{{ .Entity.Name}}(req, (err, resp) => {
        if (err) {
            console.log(err);
            return;
        }
        this.loading = false;
        this.entity = resp.get{{ucfirst .Entity.Name}}();
    });
  },
  methods: {
        log: function(e) {
            console.log(e)
        },
        update: function() {
            let cli = new BreadClient("/api");
            let req = new Update{{.Entity.Name}}Request();
            req.set{{ ucfirst .Entity.Name}}(this.entity);
            this.loading = true;

            this.snackbarShow('{{ucfirst .Entity.Name}} Saved');
            this.debug();

            cli.update{{.Entity.Name}}(req, (err, resp) => {
                if (err) {
                    console.log(err);
                    this.loading = false;
                    return;
                }
            });
        },
        debug: function() {
            {{ range .Entity.Fields }}
            console.log("{{.Property.Name}}", this.entity.get{{ ucfirst .Property.Name }}());
            {{end}}
        },
        snackbarShow: function(text, color) {
            this.snackbar.show = true;
            this.snackbar.color = color || 'info';
            this.snackbar.text = text || 'something happened';
        },
        snackbarHide: function() {
            this.snackbar.show = false
        }
  }
};
</script>

<style lang="scss" scoped>
.gocipe-form-grid {
  width: 100%;
  max-width: 800px;
  margin: 0 auto;
  display: grid;
  grid-template-columns: 1fr;
  grid-column-gap: var(--gutter, 40px);
  .gocipe-field-container {
    // grid-column: 1/2;
  }
}
</style>
