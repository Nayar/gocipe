
<template>
  <div>
    <v-autocomplete :disabled="loadingStatus" :loading="loadingStatus" @change="updateParent" v-model="selection" :multiple="multiple" :items="options" :label="$attrs.label"></v-autocomplete>
  </div>
</template>

<script>
import { AdminClient } from "@/services/service_admin_pb_service.js";
import { LookupRequest } from "@/services/service_admin_pb.js";

let cli = new AdminClient("/api");

export default {
  data() {
    return {
      options: [],
      selection: this.multiple ? [] : "",
      loadingStatus: false
    };
  },
  props: ["rpc", "multiple"],
  created() {
    this.options = this.$attrs.options;
    this.setSelection();
  },
  mounted() {
    if (this.rpc != null) {
      this.lookup();
    }
  },
  methods: {
    updateParent() {
      this.$emit("gocipe", this.selection);
    },
    setSelection() {
      let typeOfValue = typeof this.$attrs.value;
      if (typeOfValue != "undefined" && typeOfValue == "object") {
        this.selection = this.multiple
          ? this.$attrs.value.map(item => item.getId())
          : this.$attrs.value.getId();
      } else if (typeOfValue == "string" && this.$attrs.value.length == 36) {
        this.selection = this.$attrs.value;
      }
    },
    lookup() {
      let req = new LookupRequest();
      req.setTerm(this.text);
      this.loadingStatus = true;

      cli[this.rpc](req, (err, resp) => {
        this.loadingStatus = false;
        if (err) {
          console.log(err);
          return;
        }

        this.options = resp.getResultList().map(result => {
          return {
            value: result.getId(),
            text: result.getLabel()
          };
        });

        this.setSelection();
      });
    }
  },
  watch: {
    rpc: function(n, o) {
      if (n != null) {
        this.lookup();
      }
    }
  },
  inheritAttrs: false
};
</script>
