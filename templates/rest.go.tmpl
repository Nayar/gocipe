package {{.Package}}
import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
)

type responseSingle struct {
	Status   bool      `json:"status"`
	Messages []message `json:"messages"`
	Entity   *{{.Entity.Name}} `json:"entity"`
}

type responseList struct {
	Status   bool                `json:"status"`
	Messages []message           `json:"messages"`
	Entities []*{{.Entity.Name}} `json:"entities"`
}

type message struct {
	Type    rune   `json:"type"`
	Message string `json:"message"`
}

//RegisterRoutes registers routes with a mux Router
func RegisterRoutes(router *mux.Router) {
	{{if .Entity.Rest.Read}}router.HandleFunc("/{{.Endpoint}}/{id}", RestGet).Methods("GET"){{end}}
	{{if .Entity.Rest.ReadList}}router.HandleFunc("/{{.Endpoint}}", RestList).Methods("GET"){{end}}
	{{if .Entity.Rest.Create}}router.HandleFunc("/{{.Endpoint}}", RestCreate).Methods("POST"){{end}}
	{{if .Entity.Rest.Update}}router.HandleFunc("/{{.Endpoint}}/{id}", RestUpdate).Methods("PUT"){{end}}
	{{if .Entity.Rest.Delete}}router.HandleFunc("/{{.Endpoint}}/{id}", RestDelete).Methods("DELETE"){{end}}
}

{{if .Entity.Rest.Read}}
//RestGet is a REST endpoint for GET /{{.Endpoint}}/{id}
func RestGet(w http.ResponseWriter, r *http.Request) {
	var (
		id       {{pkeyPropertyType .Entity.PrimaryKey}}
		err      error
		response responseSingle
		{{if or .Entity.Rest.Hooks.PreRead .Entity.Rest.Hooks.PostRead -}}
		stop     bool
		{{- end}}
	)

	vars := mux.Vars(r)
	{{if pkeyIsInt .Entity.PrimaryKey -}}
	valid := false
	if _, ok := vars["id"]; ok {
		id, err = strconv.ParseInt(vars["id"], 10, 64)
		valid = err == nil && id > 0
	}
	{{else}}
	id, valid := vars["id"]
	{{- end}}

	if !valid {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Invalid ID"}]}`)
		return
	}

	{{if .Entity.Rest.Hooks.PreRead}}
    if stop, err = restPreGet(w, r, id); err != nil || stop {
        return
    }
    {{end}}

	response.Entity, err = Get(id)
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "An error occurred"}]}`)
		return
	}

	if response.Entity == nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusNotFound)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Entity not found"}]}`)
		return
	}

	{{if .Entity.Rest.Hooks.PostRead}}
    if stop, err = restPostGet(w, r, response.Entity); err != nil || stop {
        return
    }
    {{end}}

	response.Status = true
	response.Status = true	
	output, err := json.Marshal(response)
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "JSON encoding failed"}]}`)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	fmt.Fprint(w, string(output))
}
{{end}}

{{if .Entity.Rest.ReadList}}
//RestList is a REST endpoint for GET /{{.Endpoint}}
func RestList(w http.ResponseWriter, r *http.Request) {
	var (
		err      error
		response responseList
		filters  []models.ListFilter
		{{if or .Entity.Rest.Hooks.PreList .Entity.Rest.Hooks.PostList}}stop     bool{{end}}
	)
	{{range .Entity.Fields}}{{if .Filterable}}
	{{if eq .Property.Type "bool"}}
	if val := query.Get("{{.Serialized}}"); val != "" {
		if t, e := strconv.ParseBool(val); e == nil {
			filters = append(filters, models.ListFilter{Field:"{{.Schema.Field}}", Operation:"=", Value:t})
		}
	}
	{{end}}
	{{if eq .Property.Type "string"}}
	if val := query.Get("{{.Serialized}}"); val != "" {
		filters = append(filters, models.ListFilter{Field:"{{.Schema.Field}}", Operation:"=", Value:val})
	}

	if val := query.Get("{{.Serialized}}-lk"); val != "" {
		filters = append(filters, models.ListFilter{Field:"{{.Schema.Field}}", Operation:"LIKE", Value:"%" + val + "%"})
	}
	{{end}}
	{{if eq .Property.Type "time.Time"}}
	if val := query.Get("{{.Serialized}}"); len(val) == 16 {
		if t, e := time.Parse("2006-01-02-15-04", val); e == nil {
			filters = append(filters, models.ListFilter{Field:"{{.Schema.Field}}", Operation:"=", Value:t})
		}
	}

	if val := query.Get("{{.Serialized}}-gt"); len(val) == 16 {
		if t, e := time.Parse("2006-01-02-15-04", val); e == nil {
			filters = append(filters, models.ListFilter{Field:"{{.Schema.Field}}", Operation:">", Value:t})
		}
	}

	if val := query.Get("{{.Serialized}}-ge"); len(val) == 16 {
		if t, e := time.Parse("2006-01-02-15-04", val); e == nil {
			filters = append(filters, models.ListFilter{Field:"{{.Schema.Field}}", Operation:">=", Value:t})
		}
	}

	if val := query.Get("{{.Serialized}}-lt"); len(val) == 16 {
		if t, e := time.Parse("2006-01-02-15-04", val); e == nil {
			filters = append(filters, models.ListFilter{Field:"{{.Schema.Field}}", Operation:"<", Value:t})
		}
	}

	if val := query.Get("{{.Serialized}}-le"); len(val) == 16 {
		if t, e := time.Parse("2006-01-02-15-04", val); e == nil {
			filters = append(filters, models.ListFilter{Field:"{{.Schema.Field}}", Operation:"<=", Value:t})
		}
	}
	{{end}}
	{{end}}{{end}}

	{{if .Entity.Rest.Hooks.PreList}}
    if filters, stop, err = restPreList(w, r, filters); err != nil || stop {
        return
    }
    {{end}}

	response.Entities, err = List(filters)
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "An error occurred"}]}`)
		return
	}

	{{if .Entity.Rest.Hooks.PostList}}
    if response.Entities, stop, err = restPostList(w, r, response.Entities); err != nil || stop {
        return
    }
    {{end}}

	response.Status = true
	response.Status = true	
	output, err := json.Marshal(response)
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "JSON encoding failed"}]}`)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	fmt.Fprint(w, string(output))
}
{{end}}

{{if .Entity.Rest.Create}}
//RestCreate is a REST endpoint for POST /{{.Endpoint}}
func RestCreate(w http.ResponseWriter, r *http.Request) {
	var (
		err      error
		rawbody  []byte
		response responseSingle
		tx       *sql.Tx
		{{if or .Entity.Rest.Hooks.PreCreate .Entity.Rest.Hooks.PostCreate}}stop     bool{{end}}
	)

	rawbody, err = ioutil.ReadAll(r.Body)
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Failed to read body"}]}`)
		return
	}

	response.Entity = New()
	err = json.Unmarshal(rawbody, response.Entity)
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Failed to decode body"}]}`)
		return
	}
	{{if pkeyIsAuto .Entity.PrimaryKey -}}
	response.Entity.ID = nil
	{{- end}}

	tx, err = db.Begin()
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Failed to process"}]}`)
		return
	}

	{{if .Entity.Rest.Hooks.PreCreate}}
	if stop, err = restPreCreate(w, r, response.Entity, tx); err != nil {
		tx.Rollback()
		return
	} else if stop {
		return
	}
	{{end}}

	err = response.Entity.Save(tx, false)
	if err != nil {
		tx.Rollback()
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Save failed"}]}`)
		return
	}

	{{if .Entity.Rest.Hooks.PostCreate}}
	if stop, err = restPostCreate(w, r, response.Entity, tx); err != nil {
		tx.Rollback()
		return
	} else if stop {
		return
	}
	{{end}}
	
	if err = tx.Commit(); err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "E", "message": "RestCreate could not commit transaction"}]}`)
		return
	}

	response.Status = true	
	output, err := json.Marshal(response)
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "JSON encoding failed"}]}`)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	fmt.Fprint(w, string(output))
}
{{end}}

{{if .Entity.Rest.Update}}
//RestUpdate is a REST endpoint for PUT /{{.Endpoint}}/{id}
func RestUpdate(w http.ResponseWriter, r *http.Request) {
	var (
		err      error
		rawbody  []byte
		id       {{pkeyPropertyType .Entity.PrimaryKey}}
		response responseSingle
		tx       *sql.Tx
		{{if or .Entity.Rest.Hooks.PreUpdate .Entity.Rest.Hooks.PostUpdate -}}
		stop     bool
		{{- end}}
	)

	vars := mux.Vars(r)
	{{if pkeyIsInt .Entity.PrimaryKey -}}
	valid := false
	if _, ok := vars["id"]; ok {
		id, err = strconv.ParseInt(vars["id"], 10, 64)
		valid = err == nil && id > 0
	}
	{{else}}
	id, valid := vars["id"]
	{{- end}}

	if !valid {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Invalid ID"}]}`)
		return
	}

	response.Entity, err = Get(id)
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "An error occurred"}]}`)
		return
	}

	if response.Entity == nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusNotFound)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Entity not found"}]}`)
		return
	}

	rawbody, err = ioutil.ReadAll(r.Body)
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Failed to read body"}]}`)
		return
	}

	err = json.Unmarshal(rawbody, response.Entity)
	if err != nil {
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(http.StatusBadRequest)
			fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Failed to decode body"}]}`)
			return
		}
	}
	response.Entity.ID = &id

	tx, err = db.Begin()
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Failed to process"}]}`)
		return
	}

	{{if .Entity.Rest.Hooks.PreUpdate}}
    if stop, err = restPreUpdate(w, r, response.Entity, tx); err != nil {
		tx.Rollback()
        return
    } else if stop {
		return
	}
    {{end}}

	err = response.Entity.Save(tx, false)
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Save failed"}]}`)
		return
	}

	{{if .Entity.Rest.Hooks.PostUpdate}}
    if stop, err = restPostUpdate(w, r, response.Entity, tx); err != nil {
		tx.Rollback()
        return
    } else if stop {
		return
	}
	{{end}}
	
	if err = tx.Commit(); err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "E", "message": "RestUpdate could not commit transaction"}]}`)
		return
	}

	response.Status = true	
	output, err := json.Marshal(response)
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "JSON encoding failed"}]}`)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	fmt.Fprint(w, string(output))
}
{{end}}

{{if .Entity.Rest.Delete}}
//RestDelete is a REST endpoint for DELETE /{{.Endpoint}}/{id}
func RestDelete(w http.ResponseWriter, r *http.Request) {
	var (
		id       {{pkeyPropertyType .Entity.PrimaryKey}}
		err      error
		response responseSingle
		tx       *sql.Tx
		{{if or .Entity.Rest.Hooks.PreDelete .Entity.Rest.Hooks.PostDelete -}}
		stop     bool
		{{- end}}
	)

	vars := mux.Vars(r)
	{{if pkeyIsInt .Entity.PrimaryKey -}}
	valid := false
	if _, ok := vars["id"]; ok {
		id, err = strconv.ParseInt(vars["id"], 10, 64)
		valid = err == nil && id > 0
	}
	{{else}}
	id, valid := vars["id"]
	{{- end}}

	if !valid {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Invalid ID"}]}`)
		return
	}

	response.Entity, err = Get(id)
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "An error occurred"}]}`)
		return
	}

	if response.Entity == nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusNotFound)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Entity not found"}]}`)
		return
	}

	tx, err = db.Begin()
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Failed to process"}]}`)
		return
	}
	{{if .Entity.Rest.Hooks.PreDelete}}
	if stop, err = restPreDelete(w, r, id, tx); err != nil {
		tx.Rollback()
		return
	} else if stop {
		return
	}
    {{end}}
	err = response.Entity.Delete(tx, false)
	if err != nil {
		tx.Rollback()
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "Delete failed"}]}`)
		return
	}
	{{if .Entity.Rest.Hooks.PostDelete}}
	if stop, err = restPostDelete(w, r, id, tx); err != nil {
		tx.Rollback()
		return
	} else if stop {
		return
	}
	{{end}}
	if err = tx.Commit(); err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "E", "message": "RestDelete could not commit transaction"}]}`)
		return
	}

	response.Status = true	
	output, err := json.Marshal(response)
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"status": false, "messages": [{"type": "error", "text": "JSON encoding failed"}]}`)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	fmt.Fprint(w, string(output))
}
{{end}}
