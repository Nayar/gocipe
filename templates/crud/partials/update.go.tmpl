
// Update Will execute an SQLUpdate Statement for {{.EntityName}} in the database. Prefer using Save instead of Update directly.
func (repo {{.EntityName}}Repositorium) Update(ctx context.Context, entity *{{.EntityName}}, tx *sql.Tx, autocommit bool) error {
	var (
		err error
		stmt *sql.Stmt
	)

	if tx == nil {
		if err = util.CheckContext(ctx); err != nil {
			return err
		}

		tx, err = repo.db.Begin()
		if err != nil {
			return err
		}
	}
	
	{{range .Before}}{{.}}
	{{end}}

	stmt, err = tx.Prepare("UPDATE {{.Table}} SET {{.SQLFields}} WHERE id = $1")
	if err != nil {
		return err
	}

	{{range .After}}{{.}}
	{{end}}

	{{if .HasPreHook}}
	if err = util.CheckContext(ctx); err != nil {
		return err
	}

    if err = repo.preSave(ctx, tx, models.OperationUpdate, entity); err != nil {
		tx.Rollback()
        return err
	}
	{{end}}
	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		return err
	}
	_, err = stmt.Exec({{.StructFields}})
	if err != nil {
		tx.Rollback()
		return err
	}

	{{if .HasPostHook}}
	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		return err
	}

	if err = repo.postSave(ctx, "UPDATE", entity, tx); err != nil {
		tx.Rollback()
		return err
	}
	{{end}}
	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		return err
	}

	if autocommit {
		err = tx.Commit()
		if err != nil {
			tx.Rollback()
		}
	}

	return err
}

// UpdateWithRel Will execute an SQLUpdate Statement for {{.EntityName}} in the database; including related entities. Prefer using Save instead of Update directly.
func (repo {{.EntityName}}Repositorium) UpdateWithRel(ctx context.Context, entity *{{.EntityName}}, tx *sql.Tx, autocommit bool) error {
	var (
		err error
		stmt *sql.Stmt
	)

	if tx == nil {
		if err = util.CheckContext(ctx); err != nil {
			return err
		}

		tx, err = repo.db.Begin()
		if err != nil {
			return err
		}
	}
	
	{{range .Before}}{{.}}
	{{end}}

	stmt, err = tx.Prepare("UPDATE {{.Table}} SET {{.SQLFields}} WHERE id = $1")
	if err != nil {
		return err
	}

	{{range .After}}{{.}}
	{{end}}

	{{if .HasPreHook}}
	if err = util.CheckContext(ctx); err != nil {
		return err
	}

    if err = repo.preSave(ctx, tx, models.OperationUpdate, entity); err != nil {
		tx.Rollback()
        return err
	}
	{{end}}
	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		return err
	}
	_, err = stmt.Exec({{.StructFields}})
	if err != nil {
		tx.Rollback()
		return err
	}

	{{range .Related}}{{.}}
	if err != nil {
		tx.Rollback()
		return err
	}
	
	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		return err
	}
	{{end}}

	{{if .HasPostHook}}
	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		return err
	}

	if err = repo.postSave(ctx, "UPDATE", entity, tx); err != nil {
		tx.Rollback()
		return err
	}
	{{end}}
	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		return err
	}

	if autocommit {
		err = tx.Commit()
		if err != nil {
			tx.Rollback()
		}
	}

	return err
}