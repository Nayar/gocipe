
// Get returns a single {{.EntityName}} from database by primary key
func (repo {{.EntityName}}Repositorium) Get(ctx context.Context, id {{pkeyPropertyType .PrimaryKey}}) (*{{.EntityName}}, error) {
	var (
		rows   *sql.Rows
		err    error
		entity {{.EntityName}}
	)
	{{if .HasPreHook}}
    if err = repo.preGet(ctx, id); err != nil {
		return nil, err
	}
    {{end}}
	
	if err = util.CheckContext(ctx); err != nil {
		return nil, err
	}

	rows, err = repo.db.Query("SELECT {{.SQLFields}} FROM {{.Table}} WHERE id = $1 ORDER BY id ASC", id)
	if err != nil {
		return nil, err
	}

	defer rows.Close()
	if rows.Next() {
		if err = util.CheckContext(ctx); err != nil {
			return nil, err
		}

		{{range .Before}}{{.}}
		{{end}}

		err = rows.Scan({{.StructFields}})
		if err != nil {
			return nil, err
		}
		
		{{range .After}}{{.}}
		{{end}}
	} else {
		return nil, moderrors.RecordNotFoundError
	}
	{{if .HasPostHook}}
	if err = util.CheckContext(ctx); err != nil {
		return nil, err
	}

	if err = repo.postGet(ctx, &entity); err != nil {
		return nil, err
	}
	{{end}}

	return &entity, nil
}

// GetWithRel returns a single {{.EntityName}} from database by primary key; loads related entities
func (repo {{.EntityName}}Repositorium) GetWithRel(ctx context.Context, id {{pkeyPropertyType .PrimaryKey}}) (*{{.EntityName}}, error) {
	entity, err := repo.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	{{range .Related}}{{.}}
	if err != nil {
		return nil, err
	}

	if err = util.CheckContext(ctx); err != nil {
		return nil, err
	}
	{{end}}

	return entity, nil
}