
// Delete deletes a {{.EntityName}} record from database and sets id to nil
func (repo {{.EntityName}}Repositorium) Delete(ctx context.Context, entity *{{.EntityName}}, tx *sql.Tx, autocommit bool) error {
	var (
		err  error
		stmt *sql.Stmt
	)
	id := entity.ID

	log.WithFields(log.Fields{"entity": entity}).Debug("repo.{{.EntityName}}.Delete entered")
	if tx == nil {
		if err = util.CheckContext(ctx); err != nil {
			log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Delete context error")
			return errors.WithStack(err)
		}

		tx, err = StartTransaction(ctx)
		if err != nil {
			log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Delete StartTransaction error")
			return errors.WithStack(err)
		}
	}

	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Delete context error")
		return errors.WithStack(err)
	}

	stmt, err = tx.Prepare("DELETE FROM {{.Table}} WHERE id = $1")
	defer stmt.Close()
	if err != nil {
		tx.Rollback()
		log.WithFields(log.Fields{"entity": entity, "query": `DELETE FROM {{.Table}} WHERE id = $1`, "error": err}).Error("repo.{{.EntityName}}.Delete query error")
		return errors.WithStack(err)
	}
	{{if .HasPreHook}}
	if err = util.CheckContext(ctx); err != nil {
		tx.Rollback()
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Delete context error")
		return errors.WithStack(err)
	}

	if err = repo.preDelete(ctx, tx, id); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Delete hook preDelete error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	log.WithFields(log.Fields{"entity": entity}).Debug("repo.{{.EntityName}}.Delete hook preDelete executed")
	{{end}}
	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Delete context error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	
	_, err = stmt.Exec(id)
	if err == nil {
		entity.ID = {{pkeyPropertyEmptyVal .PrimaryKey}}
	} else {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Delete query exec error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	
	{{range .Post}}{{.}}
	{{end}}

	{{if .HasPostHook}}
	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Delete context error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	
	if err = repo.postDelete(ctx, tx, id); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Delete hook postDelete error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	log.WithFields(log.Fields{"entity": entity}).Debug("repo.{{.EntityName}}.Delete hook postDelete executed")
	{{end}}
	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Delete context error")
		tx.Rollback()
		return errors.WithStack(err)
	}

	if autocommit {
		err = tx.Commit()
		if err != nil {
			log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Delete commit error")
			tx.Rollback()
		}
	}

	return errors.WithStack(err)
}