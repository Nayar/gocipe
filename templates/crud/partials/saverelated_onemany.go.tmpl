
// Save{{.Funcname}} is a helper function to save related {{.PropertyName}} (one-many relationship)
func (repo {{.EntityName}}Repositorium) Save{{.Funcname}}(ctx context.Context, tx *sql.Tx, autocommit bool, idthis {{pkeyPropertyType .PrimaryKey}}, relatives ...{{.ThatType}}) error {
	var (
		stmt *sql.Stmt
		err  error
	)

	log.WithFields(log.Fields{"id": idthis, "relatives": relatives}).Debug("repo.{{.EntityName}}.Save entered")
	if tx == nil {
		if err = util.CheckContext(ctx); err != nil {
			log.WithFields(log.Fields{"id": idthis, "relatives": relatives}).Info("repo.{{.EntityName}}.Save context error")
			return errors.WithStack(err)
		}

		tx, err = StartTransaction(ctx)
		if err != nil {
			log.WithFields(log.Fields{"id": idthis, "relatives": relatives, "error": err}).Info("repo.{{.EntityName}}.Save StartTransaction error")
			return errors.WithStack(err)
		}
	}

	stmt, err = tx.Prepare("UPDATE {{.Table}} SET {{.ThatColumn}} = $1 WHERE {{.ThatColumn}} = $2")
	defer stmt.Close()
	if err != nil {
		tx.Rollback()
		log.WithFields(log.Fields{"id": idthis, "relatives": relatives, "query": "UPDATE {{.Table}} SET {{.ThatColumn}} = $1 WHERE {{.ThatColumn}} = $2", "error": err}).Error("repo.{{.EntityName}}.Save query error")
		return errors.WithStack(err)
	}

	_, err = stmt.Exec({{.DanglingVal}}, idthis)
	if err != nil {
		log.WithFields(log.Fields{"id": idthis, "relatives": relatives, "error": err}).Info("repo.{{.EntityName}}.Save query exec error")
		tx.Rollback()
		return errors.WithStack(err)
	}

	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"id": idthis, "relatives": relatives}).Info("repo.{{.EntityName}}.Save context error")
		tx.Rollback()
		return errors.WithStack(err)
	}

	stmt, err = tx.Prepare("UPDATE {{.Table}} SET {{.ThatColumn}} = $1 WHERE {{.ThisColumn}} = $2")
	defer stmt.Close()
	if err != nil {
		tx.Rollback()
		log.WithFields(log.Fields{"id": idthis, "relatives": relatives, "query": "UPDATE {{.Table}} SET {{.ThatColumn}} = $1 WHERE {{.ThisColumn}} = $2", "error": err}).Error("repo.{{.EntityName}}.Save query error")
		return errors.WithStack(err)
	}

	for _, rel := range relatives {
		if err = util.CheckContext(ctx); err != nil {
			log.WithFields(log.Fields{"id": idthis, "relatives": relatives}).Info("repo.{{.EntityName}}.Save context error")
			tx.Rollback()
			return errors.WithStack(err)
		}

		_, err = stmt.Exec(idthis, rel.ID)
		if err != nil {
			log.WithFields(log.Fields{"id": idthis, "relatives": relatives, "error": err}).Info("repo.{{.EntityName}}.Save query exec " + rel.Name + " error")
			tx.Rollback()
			return errors.WithStack(err)
		}
	}

	if autocommit {
		err = tx.Commit()
		if err != nil {
			log.WithFields(log.Fields{"id": idthis, "relatives": relatives, "error": err}).Info("repo.{{.EntityName}}.Save commit error")
			tx.Rollback()
		}
	}

	return errors.WithStack(err)
}
