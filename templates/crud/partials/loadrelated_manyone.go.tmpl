
// Load{{.Funcname}} is a helper function to load related {{.PropertyName}} entities
func (repo {{.ThisEntity}}Repositorium) Load{{.Funcname}}(ctx context.Context, entities ...*{{.ThisEntity}}) error {
	var (
		err error
		placeholder string
		values  []interface{}
		indices = make(map[{{.ThatType}}][]*{{.ThisEntity}})
	)

	if err = util.CheckContext(ctx); err != nil {
		return errors.WithStack(err)
	} else if len(entities) == 0 {
		return nil
	}

	c := 1
	for _, entity := range entities {
		placeholder += "$" + strconv.Itoa(c) + ","
		indices[entity.{{.ThisID}}] = append(indices[entity.{{.ThisID}}], entity)
		values = append(values, entity.{{.ThisID}})
		c++
	}
	placeholder = strings.TrimRight(placeholder, ",")
	rows, err := repo.db.Query(`
		SELECT t."id", {{.SQLFields}} FROM {{.ThatTable}} t WHERE t."id" IN (`+placeholder+`)
	`, values...)
	if err != nil {
		return errors.WithStack(err)
	}

	if err = util.CheckContext(ctx); err != nil {
		return errors.WithStack(err)
	}

	for rows.Next() {
		var (
			thatID {{.ThatType}}
			thatEntity {{.ThatEntity}}
		)
		{{range .Before}}{{.}}
		{{end}}
		err = rows.Scan(&thatID, {{.StructFields}})
		if err != nil {
			return errors.WithStack(err)
		}
		{{range .After}}{{.}}
		{{end}}

		for _, ent := range indices[thatID] {
			ent.{{.PropertyName}} = &thatEntity
		}
		
		if err = util.CheckContext(ctx); err != nil {
			return errors.WithStack(err)
		}
	}

	return nil
}
