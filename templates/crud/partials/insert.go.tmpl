
// Insert performs an SQL insert for {{.EntityName}} record and update instance with inserted id. Prefer using Save instead of Insert directly.
func (repo {{.EntityName}}Repositorium) Insert(ctx context.Context, entity *{{.EntityName}}, tx *sql.Tx, autocommit bool) error {
	var (
		{{- if pkeyIsAuto .PrimaryKey -}}
		id string
		{{- end}}
		err  error
		stmt *sql.Stmt
	)

	log.WithFields(log.Fields{"entity": entity}).Debug("repo.{{.EntityName}}.Insert entered")
	if entity == nil {
		log.WithFields(log.Fields{"entity": entity}).Info("repo.{{.EntityName}}.Insert Entity empty error")
		return moderrors.SaveEmptyEntityError
	}

	if tx == nil {
		if err = util.CheckContext(ctx); err != nil {
			log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Insert context error")
			return errors.WithStack(err)
		}
		
		tx, err = StartTransaction(ctx)
		if err != nil {
			log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Insert StartTransaction error")
			return errors.WithStack(err)
		}
	}
	{{range .Before}}{{.}}
	{{end}}

	{{if eq .PrimaryKey "serial" -}}
	stmt, err = tx.Prepare(`INSERT INTO {{.Table}} ({{.SQLFields}}) VALUES ({{.SQLPlaceholders}}) RETURNING id`)
	if err != nil {
		log.WithFields(log.Fields{"entity": entity, "query": `INSERT INTO {{.Table}} ({{.SQLFields}}) VALUES ({{.SQLPlaceholders}}) RETURNING id`, "error": err}).Error("repo.{{.EntityName}}.Insert serial query error")
		return errors.WithStack(err)
	}
	{{else}}
	stmt, err = tx.Prepare(`INSERT INTO {{.Table}} ({{.SQLFields}}) VALUES ({{.SQLPlaceholders}})`)
	if err != nil {
		log.WithFields(log.Fields{"entity": entity, "query": `INSERT INTO {{.Table}} ({{.SQLFields}}) VALUES ({{.SQLPlaceholders}})`, "error": err}).Error("repo.{{.EntityName}}.Insert query error")
		return errors.WithStack(err)
	}
	{{- end}}
	log.WithFields(log.Fields{"entity": entity}).Debug("repo.{{.EntityName}}.Insert query done")

	{{range .After}}{{.}}
	{{end}}

	{{if .HasPreHook}}
	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Insert context error")
		return errors.WithStack(err)
	}
	
	if err = repo.preSave(ctx, tx, models.Insert, entity); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Insert hook preSave error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	log.WithFields(log.Fields{"entity": entity}).Debug("repo.{{.EntityName}}.Insert hook preSave executed")
	{{end}}
	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Insert context error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	{{if eq .PrimaryKey "serial" -}}
	err = stmt.QueryRow({{.StructFields}}).Scan(&id)
	if err == nil {
		entity.ID = id
	} else {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Insert query row error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	{{else}}
	{{if eq .PrimaryKey "uuid" -}}
	idUUID := uuid.NewV4()
	id = idUUID.String()
	entity.ID = id
	{{- end}}

	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Insert context error")
		tx.Rollback()
		return errors.WithStack(err)
	}

	_, err = stmt.Exec({{.StructFields}})
	if err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Insert query exec error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	{{end}}

	{{if .HasPostHook}}
	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Insert context error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	if err := repo.postSave(ctx, "INSERT", entity, tx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Insert hook postSave error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	log.WithFields(log.Fields{"entity": entity}).Debug("repo.{{.EntityName}}.Insert hook postSave executed")
	{{end}}

	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Insert context error")
		tx.Rollback()
		return errors.WithStack(err)
	}

	if autocommit {
		err = tx.Commit()
		if err != nil {
			log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.Insert commit error")
			tx.Rollback()
		}
	}

	return errors.WithStack(err)
}

// InsertWithRel performs an SQL insert for {{.EntityName}} record and update instance with inserted id; including related entities. Prefer using Save instead of Insert directly.
func (repo {{.EntityName}}Repositorium) InsertWithRel(ctx context.Context, entity *{{.EntityName}}, tx *sql.Tx, autocommit bool) error{
	var (
		{{- if pkeyIsAuto .PrimaryKey -}}
		id  string
		{{- end}}
		err  error
		stmt *sql.Stmt
	)
	
	log.WithFields(log.Fields{"entity": entity}).Debug("repo.{{.EntityName}}.InsertWithRel entered")
	if entity == nil {
		log.WithFields(log.Fields{"entity": entity}).Info("repo.{{.EntityName}}.InsertWithRel Entity empty error")
		return moderrors.SaveEmptyEntityError
	}

	if tx == nil {
		if err = util.CheckContext(ctx); err != nil {
			log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.InsertWithRel context error")
			return errors.WithStack(err)
		}
		
		tx, err = StartTransaction(ctx)
		if err != nil {
			log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.InsertWithRel StartTransaction error")
			return errors.WithStack(err)
		}
	}
	{{range .Before}}{{.}}
	{{end}}

	{{if eq .PrimaryKey "serial" -}}
	stmt, err = tx.Prepare(`INSERT INTO {{.Table}} ({{.SQLFields}}) VALUES ({{.SQLPlaceholders}}) RETURNING id`)
	if err != nil {
		log.WithFields(log.Fields{"entity": entity, "query": `INSERT INTO {{.Table}} ({{.SQLFields}}) VALUES ({{.SQLPlaceholders}}) RETURNING id`, "error": err}).Error("repo.{{.EntityName}}.InsertWithRel serial query error")
		return errors.WithStack(err)
	}
	{{else}}
	stmt, err = tx.Prepare(`INSERT INTO {{.Table}} ({{.SQLFields}}) VALUES ({{.SQLPlaceholders}})`)
	if err != nil {
		log.WithFields(log.Fields{"entity": entity, "query": `INSERT INTO {{.Table}} ({{.SQLFields}}) VALUES ({{.SQLPlaceholders}})`, "error": err}).Error("repo.{{.EntityName}}.InsertWithRel query error")
		return errors.WithStack(err)
	}
	{{- end}}

	{{range .After}}{{.}}
	{{end}}

	{{if .HasPreHook}}
	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.InsertWithRel context error")
		return errors.WithStack(err)
	}
	
	if err = repo.preSave(ctx, tx, models.Insert, entity); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.InsertWithRel hook preSave error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	log.WithFields(log.Fields{"entity": entity}).Debug("repo.{{.EntityName}}.InsertWithRel hook preSave executed")
	{{end}}
	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.InsertWithRel context error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	{{if eq .PrimaryKey "serial" -}}
	err = stmt.QueryRow({{.StructFields}}).Scan(&id)
	if err == nil {
		entity.ID = id
	} else {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.InsertWithRel query row error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	{{else}}
	{{if eq .PrimaryKey "uuid" -}}
	idUUID := uuid.NewV4()
	id = idUUID.String()
	entity.ID = id
	{{- end}}

	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.InsertWithRel context error")
		tx.Rollback()
		return errors.WithStack(err)
	}

	_, err = stmt.Exec({{.StructFields}})
	if err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.InsertWithRel query exec error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	{{end}}

	{{$i := 0 -}}
	{{range $name, $code := .Related}}{{$code}}
	if err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{$.EntityName}}.InsertWithRel save related {{$name}} error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	{{if ne (plus1 $i) (len $.Related)}}
	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{$.EntityName}}.InsertWithRel context error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	{{end}}
	{{- $i = plus1 $i }}
	{{end}}

	{{if .HasPostHook}}
	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.InsertWithRel context error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	if err := repo.postSave(ctx, "INSERT", entity, tx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.InsertWithRel hook postSave error")
		tx.Rollback()
		return errors.WithStack(err)
	}
	log.WithFields(log.Fields{"entity": entity}).Debug("repo.{{.EntityName}}.InsertWithRel hook postSave executed")
	{{end}}

	if err = util.CheckContext(ctx); err != nil {
		log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.InsertWithRel context error")
		tx.Rollback()
		return errors.WithStack(err)
	}

	if autocommit {
		err = tx.Commit()
		if err != nil {
			log.WithFields(log.Fields{"entity": entity, "error": err}).Info("repo.{{.EntityName}}.InsertWithRel commit error")
			tx.Rollback()
		}
	}

	return errors.WithStack(err)
}
