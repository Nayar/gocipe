package models

var (
	db *sql.DB
	{{range .Entities}}
	// {{.Name}}Repo provides interaction with database content repository for {{.Name}}
	{{.Name}}Repo {{.Name}}Repository
	{{- end}}
)

const (
	// OperationMerge indicates a Merge save operation is under way
	OperationMerge  byte = 'M'
	// OperationInsert indicates a Insert save operation is under way
	OperationInsert byte = 'I'
	// OperationUpdate indicates a Update save operation is under way
	OperationUpdate byte = 'U'
)

// Init is responsible to initialize all repositories
func Init(database *sql.DB) {
	db = database
	{{range .Entities}}
	{{.Name}}Repo = {{.Name}}Repositorium{db: database}
	{{- end}}
}

// StartTransaction initiates a database transaction
func StartTransaction() (*sql.Tx, error) {
	return db.Begin()
}

//ListFilter represents a filter to apply during listing (crud)
type ListFilter struct {
	Field     string
	Operation string
	Value     interface{}
}

{{range .Entities -}}
// {{.Name}}Repository encapsulates operations that may be performed on the entity {{.Name}}
type {{.Name}}Repository interface {
{{if (DerefCrudOpts .Crud).Create -}}
	// Insert performs an SQL insert for {{.Name}} record and update instance with inserted id.
	Insert(ctx context.Context, entity {{.Name}}, tx *sql.Tx, autocommit bool) ({{.Name}}, error)
{{end -}}
{{if (DerefCrudOpts .Crud).Read -}}
	// Get returns a single {{.Name}} from database by primary key
	Get(ctx context.Context, id {{pkeyPropertyType .PrimaryKey}}) ({{.Name}}, error)
{{end -}}
{{if (DerefCrudOpts .Crud).ReadList -}}
	// List returns a slice containing {{.Name}} records
	List(ctx context.Context, filters []ListFilter, offset, limit int) ([]*{{.Name}}, error)
{{end -}}

{{if (DerefCrudOpts .Crud).Update -}}
	// Update Will execute an SQLUpdate Statement for {{.Name}} in the database. Prefer using Save instead of Update directly.
	Update(ctx context.Context, entity {{.Name}}, tx *sql.Tx, autocommit bool) ({{.Name}}, error)
{{end -}}

{{if (DerefCrudOpts .Crud).Delete -}}
	// DeleteMany deletes many {{.Name}} records from database using filter
	DeleteMany(ctx context.Context, filters []ListFilter, tx *sql.Tx, autocommit bool) error
	// Delete deletes a {{.Name}} record from database and sets id to nil
	Delete(ctx context.Context, entity {{.Name}}, tx *sql.Tx, autocommit bool) ({{.Name}}, error)
{{end -}}
{{if (DerefCrudOpts .Crud).Merge -}}
	// Merge performs an SQL merge for {{.Name}} record.
	Merge(ctx context.Context, entity {{.Name}}, tx *sql.Tx, autocommit bool) ({{.Name}}, error)
{{end -}}
{{if (and (and (DerefCrudOpts .Crud).Create (DerefCrudOpts .Crud).Update) (DerefCrudOpts .Crud).Merge) -}}
	// Save either inserts or updates a {{.Name}} record based on whether or not id is nil
	Save(ctx context.Context, entity {{.Name}}, tx *sql.Tx, autocommit bool) ({{.Name}}, error)
{{end -}}
{{- $ThisEntity := .Name -}}
{{range .Relationships -}}
{{if eq .Type "many-many" -}}
	// Load{{RelFuncName .}} is a helper function to load related {{.Name}} entities
	Load{{RelFuncName .}}(ctx context.Context, entities ...*{{$ThisEntity}}) error
{{end -}}
{{if eq .Type "one-many" -}}
	// Load{{RelFuncName .}} is a helper function to load related {{.Name}} entities
	Load{{RelFuncName .}}(ctx context.Context, entities ...*{{$ThisEntity}}) error
{{end -}}
{{if eq .Type "many-one" -}}
	// Load{{RelFuncName .}} is a helper function to load related {{.Name}} entities
	Load{{RelFuncName .}}(ctx context.Context, entities ...*{{$ThisEntity}}) error
{{end -}}
{{end -}}
}

// {{.Name}}Repositorium implements {{.Name}}Repository
type {{.Name}}Repositorium struct {
	db *sql.DB
}
{{end}}