package bread

import (
	"github.com/pkg/errors"
	"golang.org/x/net/context"
)

var (
	// ErrorInvalidOperation indicates an error for an invalid operation
	ErrorInvalidOperation   = errors.New("invalid filter operation specified")
	// ErrorRequestEmpty indicates an error when empty request is received
	ErrorRequestEmpty       = errors.New("request object is malformed")
	// ErrorInvalidUploadField indicates an error for an unknown upload field
	ErrorInvalidUploadField = errors.New("invalid upload field") 
)

// NewBoolFilter returns a new filter for boolean types
func NewBoolFilter(filter *Filter) (*models.Filter, error) {
	value, err := strconv.ParseBool(filter.Value); 
	
	if err != nil {
		return nil, err
	}

	return &models.Filter{Field: filter.Field, Operation: "=", Value: value}, nil
}

// NewStringFilter returns a new filter for text values
func NewStringFilter(filter *Filter) (*models.Filter, error) {
	switch filter.Operation {
	case "=":
		return &models.Filter{Field: filter.Field, Operation: "=", Value: filter.Value}, nil
	case "~":
		return &models.Filter{Field: filter.Field, Operation: "LIKE", Value: filter.Value}, nil
	}

	return nil, ErrorInvalidOperation
}

// NewDateFilter returns a new filter to handle dates
func NewDateFilter(filter *Filter) (*models.Filter, error) {
	var (
		value time.Time
		err   error
	)

	if value, err = time.Parse(time.RFC3339, filter.Value); err != nil {
		return nil, err
	}

	switch filter.Operation {
	case "=":
		return &models.Filter{Field: filter.Field, Operation: "=", Value: value}, nil
	case ">":
		return &models.Filter{Field: filter.Field, Operation: ">", Value: value}, nil
	case ">=":
		return &models.Filter{Field: filter.Field, Operation: ">=", Value: value}, nil
	case "<":
		return &models.Filter{Field: filter.Field, Operation: "<", Value: value}, nil
	case "<=":
		return &models.Filter{Field: filter.Field, Operation: "<=", Value: value}, nil
	}

	return &models.Filter{Field: filter.Field, Operation: "LIKE", Value: value}, nil
}

// Service represents BREAD service implementation
type Service struct {}

{{range .Entities}}
/**
 * [BEGIN] {{.Name}}
 */
{{if .Bread.Create -}}
// Create{{.Name}} allows creation of entity of type {{.Name}}
func(s Service) Create{{.Name}}(ctx context.Context, req *Create{{.Name}}Request) (*Create{{.Name}}Response, error) {
	var (
		err  error
		tx   *sql.Tx
		res  Create{{.Name}}Response
		{{if or .Bread.Hooks.PreCreate .Bread.Hooks.PostCreate -}}
		stop bool
		{{- end}}
	)

	if req == nil {
		return nil, ErrorRequestEmpty
	}

	if req.{{.Name}} == nil {
		res.{{.Name}} = new(models.{{.Name}})
	} else {
		res.{{.Name}} = req.{{.Name}}
	}
	tx, err = models.StartTransaction(ctx)
	{{if .Bread.Hooks.PreCreate}}
	stop, err = s.{{lower .Name}}PreCreate(ctx, tx, req, &res, err)
	if stop {
		return &res, nil
	}
	{{- end}}

	if err != nil {
		return nil, errors.WithStack(err)
	}

	err = models.{{.Name}}Repo.Save(ctx, res.{{.Name}}, tx, true)

	{{if .Bread.Hooks.PostCreate -}}
	stop, err = s.{{lower .Name}}PostCreate(ctx, req, &res, err)
	if stop {
		return &res, nil
	}
	{{- end}}

	if err != nil {
		return nil, errors.WithStack(err)
	}

	return &res, errors.WithStack(err)
}
{{- end}}

{{if .Bread.Read -}}
// Get{{.Name}} allows getting a single entity of type {{.Name}}
func(s Service) Get{{.Name}}(ctx context.Context, req *GetRequest) (*Get{{.Name}}Response, error) {
	var (
		res  Get{{.Name}}Response
		err  error
		{{if or .Bread.Hooks.PreRead .Bread.Hooks.PostRead -}}
		stop bool
		{{- end}}
	)

	if req == nil || req.ID == "" {
		return nil, ErrorRequestEmpty
	}

	{{if .Bread.Hooks.PreRead}}
	stop, err = s.{{lower .Name}}PreRead(ctx, req, &res)
	if stop {
		return &res, nil
	}
	{{- end}}

	res.{{.Name}}, err = models.{{.Name}}Repo.GetWithRel(ctx, req.ID)

	{{if .Bread.Hooks.PostRead -}}
	stop, err = s.{{lower .Name}}PostRead(ctx, req, &res, err)
	if stop {
		return &res, nil
	}
	{{- end}}

	if err != nil {
		return nil, errors.WithStack(err)
	}

	return &res, nil
}
{{- end}}

{{if .Bread.List -}}
// List{{plural .Name}} allows listing all entity of type {{.Name}}
func(s Service) List{{plural .Name}}(ctx context.Context, req *ListRequest) (*List{{plural .Name}}Response, error) {
	var (
		res  List{{plural .Name}}Response
		err  error
		{{if or .Bread.Hooks.PreList .Bread.Hooks.PostList -}}
		stop bool
		{{- end}}
		filters []*models.Filter
	)

	if req == nil {
		return nil, ErrorRequestEmpty
	}

	{{if .Bread.Hooks.PreList -}}
	stop, err = s.{{lower .Name}}PreList(ctx, req, &res)
	if stop {
		return &res, nil
	}
	{{- end}}

	if req.ListOpts == nil {
		req.ListOpts = &models.ListOpts{Offset: models.NoOffset, Limit: models.NoLimit}
	}

	{{$filters := getBreadFilters $.Entities . }}
	{{if (or $filters.HasBool $filters.HasString $filters.HasDate)}}
	if req.Filters != nil {
		for i := range req.Filters {
			switch req.Filters[i].Field {
			{{if $filters.HasBool}}
			case {{$filters.BoolFilters}}:
				if f, err := NewBoolFilter(req.Filters[i]); err == nil {
					return nil, err
				} else {
					filters = append(filters, f)
				}
			{{end}}
			{{if $filters.HasString}}
			case {{$filters.StringFilters}}:
				if f, err := NewStringFilter(req.Filters[i]); err == nil {
					return nil, err
				} else {
					filters = append(filters, f)
				}
			{{end}}
			{{if $filters.HasDate}}
			case {{$filters.DateFilters}}:
				if f, err := NewDateFilter(req.Filters[i]); err == nil {
					return nil, err
				} else {
					filters = append(filters, f)
				}
			{{end}}
			}
		}
	}
	{{end}}

	res.{{plural .Name}}, err = models.{{.Name}}Repo.ListWithRel(ctx, req.ListOpts, filters...)

	{{if .Bread.Hooks.PostList -}}
	stop, err = s.{{lower .Name}}PostList(ctx, req, &res, err)
	if stop {
		return &res, nil
	}
	{{- end}}
	
	if err != nil {
		return nil, errors.WithStack(err)
	}

	return &res, nil
}
{{- end}}

{{if .Bread.Update -}}
// Update{{.Name}} allows updating one entity of type {{.Name}}
func(s Service) Update{{.Name}}(ctx context.Context, req *Update{{.Name}}Request) (*Update{{.Name}}Response, error) {
	var (
		err  error
		tx   *sql.Tx
		res  Update{{.Name}}Response
		{{if or .Bread.Hooks.PreUpdate .Bread.Hooks.PostUpdate -}}
		stop bool
		{{- end}}
	)

	if req == nil || req.{{.Name}} == nil {
		return nil, ErrorRequestEmpty
	}

	// existing records in DB
	existing, err := models.{{.Name}}Repo.Get(ctx, req.{{.Name}}.ID)
	if err != nil {
		{{if .Bread.Hooks.PreUpdate -}}
		stop, err = s.{{lower .Name}}PreUpdate(ctx, tx, req, &res, *existing, err)
		if stop {
			return &res, nil
		}
		{{end}}
		return nil, errors.WithStack(err)
	}

	res.{{.Name}} = req.{{.Name}}
	{{range $fileField := index $.EntitiesFileFields .Name}}
	res.{{.Entity}}.{{.Field}} = existing.{{.Field}}
	{{end}}
	tx, err = models.StartTransaction(ctx)

	{{if .Bread.Hooks.PreUpdate -}}
	stop, err = s.{{lower .Name}}PreUpdate(ctx, tx, req, &res, *existing, err)
	if stop {
		return &res, nil
	}
	{{- end}}

	if err != nil {
		return nil, errors.WithStack(err)
	}

	err = models.{{.Name}}Repo.SaveWithRel(ctx, res.{{.Name}}, tx, true)
	if err != nil {
		return nil, errors.WithStack(err)
	}

	{{if .Bread.Hooks.PostUpdate -}}
	stop, err = s.{{lower .Name}}PostUpdate(ctx, req, &res, *existing, err)
	if stop {
		return &res, nil
	}
	{{- end}}

	if err != nil {
		return nil, errors.WithStack(err)
	}

	return &res, nil
}
{{- end}}

{{if .Bread.Delete -}}
// Delete{{.Name}} allows deleting an entity of type {{.Name}}
func(s Service) Delete{{.Name}}(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var (
		err  error
		tx   *sql.Tx
		res  DeleteResponse
		{{if or .Bread.Hooks.PreDelete .Bread.Hooks.PostDelete -}}
		stop bool
		{{- end}}
	)

	if req == nil || req.ID == "" {
		return nil, ErrorRequestEmpty
	}

	// existing records in DB
	existing, err := models.{{.Name}}Repo.Get(ctx, req.ID)
	if err != nil {
		{{if .Bread.Hooks.PreDelete -}}
		stop, err = s.{{lower .Name}}PreDelete(ctx, tx, req, &res, *existing, err)
		if stop {
			return &res, nil
		}
		{{end}}
		return nil, errors.WithStack(err)
	}

	tx, err = models.StartTransaction(ctx)
	{{if .Bread.Hooks.PreDelete}}
	stop, err = s.{{lower .Name}}PreDelete(ctx, tx, req, &res, *existing, err)
	if stop {
		return &res, nil
	}
	{{end}}
	err = models.{{.Name}}Repo.Delete(ctx, existing, tx, true)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	{{if .Bread.Hooks.PostDelete}}
	stop, err = s.{{lower .Name}}PostDelete(ctx, req, &res, *existing, err)
	if stop {
		return &res, nil
	}
	{{- end}}
	
	if err != nil {
		return nil, errors.WithStack(err)
	}

	return &res, nil
}
{{- end}}
{{if hasFileFields .}}
// Upload{{.Name}} allows uploading of files for entity of type {{.Name}}
func(s Service) Upload{{.Name}}(ctx context.Context, req *UploadRequest) (*UploadResponse, error) {
	var (
		res       UploadResponse
		options   *files.UploadOptions
		fieldname string
	)

	if req == nil {
		return &res, ErrorRequestEmpty
	}

	switch req.Field {
		{{$EntityName := .Name}}
		{{- range (getFileFields .)}}
		{{.}}
		{{- end}}
		default:
			return &res, ErrorInvalidUploadField
	}

	fileDiskPath, filePath, err := files.Upload(req.Filename, req.Content, options)
	if err != nil {
		if fileDiskPath != "" {
			files.Delete(fileDiskPath)
		}
		return &res, nil
	}

	if err = util.CheckContext(ctx); err != nil {
		files.Delete(fileDiskPath)
		return &res, errors.WithStack(err)
	}

	tx, err := models.StartTransaction(ctx)
	if err != nil {
		files.Delete(fileDiskPath)
		return &res, err
	}
	
	stmt, err := tx.Prepare(`UPDATE {{.Table}} SET `+fieldname+` = $1 WHERE id = $2`)
	if err != nil {
		files.Delete(fileDiskPath)
		return &res, errors.WithStack(err)
	}

	_, err = stmt.Exec(filePath, req.ID)
	if err != nil {
		tx.Rollback()
		files.Delete(fileDiskPath)
		return &res, errors.WithStack(err)
	}

	err = tx.Commit()
	res.URI = filePath
	return &res, err
}
{{- end}}

// Lookup{{.Name}} lookup allows looking up an entity by its label for entity of type {{.Name}}
func(s Service) Lookup{{.Name}}(ctx context.Context, req *LookupRequest) (*LookupResponse, error) {
	//var (
	//	list []*Sponsor
	//	err  error
	//	rows *sql.Rows
	//)
    //
	//rows, err = repo.db.Query(`SELECT id, t."TODO" FROM {{.Table}} t WHERE `, values...)
	//if err != nil {
	//	return nil, err
	//}
    //
	//defer rows.Close()
	//for rows.Next() {
	//	if err = util.CheckContext(ctx); err != nil {
	//		return nil, err
	//	}
    //
	//	//TODO
	//}

	return nil, nil
}
/**
 * [END] {{.Name}}
 */
{{end}}