package main

import (
	"net/http"
	"os"

	"github.com/gorilla/mux"
	"github.com/improbable-eng/grpc-web/go/grpcweb"
	log "github.com/sirupsen/logrus"
	"lsl.digital/auth-system/id-sdk-go/auth"
	"lsl.digital/redac-systems/culture/app"
	"lsl.digital/redac-systems/culture/constant"
	"lsl.digital/redac-systems/culture/util"
	wb "lsl.digital/redac-systems/culture/util/web"
)

func newMuxRouter(ws *grpcweb.WrappedGrpcServer, wireClient *auth.WireClient) *mux.Router {
	router := mux.NewRouter()

    {{if not .Bootstrap.NoGRPCWeb}}
	router.PathPrefix("/api").Handler(http.StripPrefix("/api", ws))
    {{end}}

	if _, err := wb.NewSubrouter(router, "/", "app", nil); err != nil {
		log.WithFields(log.Fields{
			"error":  err,
		}).Fatal("Could not create sub route")
	}

    {{if not .Bootstrap.NoAuth}}
    router.PathPrefix("/auth").Handler(auth.NewHandler(*wireClient, "/debug")).Methods("GET", "HEAD")
	if app.Env == app.EnvironmentDev {
		router.PathPrefix("/debug").Handler(auth.NewDebugHandler(*wireClient)).Methods("GET", "HEAD")
	}
    {{end}}

	return router
}
