package main

import (
	"net/http"

	rice "github.com/GeertJohan/go.rice"
	"github.com/gorilla/mux"
	"github.com/improbable-eng/grpc-web/go/grpcweb"
	"google.golang.org/grpc"
)

//go:generate rice embed-go

{{if not .Bootstrap.NoVersion}}
// Versioning info
var (
	appVersion = "n/a"
	appCommit  = "n/a"
	appBuilt   = "n/a"
)
{{end}}

func main() {
	{{- if not .Bootstrap.NoVersion}}
	version := flag.Bool("v", false, "prints current app version")
	flag.Parse()
	if *version {
		fmt.Printf("Version : %v \nCommit : %v\nBuilt: %v\n", appVersion, appCommit, appBuilt)
		os.Exit(0)
	}
	{{end}}

	config := app.Bootstrap()
	models.Init(config.DB)

	router := mux.NewRouter()
	
	{{if not .Bootstrap.NoGRPCWeb}}
	g := grpc.NewServer()
	ws := grpcweb.WrapServer(g)
	router.PathPrefix("/api").Handler(http.StripPrefix("/api", ws))
	{{end}}

	{{if .Bootstrap.Assets}}
	app.Assets = rice.MustFindBox("assets")

	if app.Env == app.EnvironmentDev {
		files, err := ioutil.ReadDir("web")
		if err != nil {
			log.Println(err)
		}
		for _, f := range files {
			if f.IsDir() {
				httpDir := "web/" + f.Name() + "/dist"
				router.PathPrefix("/" + f.Name()).Handler(http.StripPrefix("/"+f.Name(), http.FileServer(http.Dir(httpDir))))
			}
		}
	} else {
		w, err := app.Assets.Open("web")
		if err != nil {
			log.Fatalln(err)
		}
		dirs, err := w.Readdir(0)
		if err != nil {
			log.Fatalln(err)
		}
		for _, dir := range dirs {
			if dir.IsDir() {
				router.PathPrefix(
					"/" + dir.Name(),
				).Handler(
					util.NewWebBoxHandler(app.Assets, "web/"+dir.Name(), dir.Name()),
				)
			}
		}
	}
	{{end}}

	{{if not .Bootstrap.NoGRPCWire}}
	go func() {
		l, err := net.Listen("tcp", ":"+config.GRPCPort)
		if err != nil {
			log.Fatalf("error starting tcp listener: %v", err)
		}
		defer l.Close()

		g := grpc.NewServer()
		if err := g.Serve(l); err != nil {
			log.Fatalf("error serving grpc: %v", err)
		}
	}()
	{{end}}

	if err := http.ListenAndServe(":"+config.HTTPPort, router); err != nil {
		log.Fatalf("error starting http server: %v", err)
	}
}
